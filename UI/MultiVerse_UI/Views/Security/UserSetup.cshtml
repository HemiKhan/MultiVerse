@{
    ViewBag.Title = "User Setup";
    Layout = "~/Views/Shared/_Masterpage.cshtml";
    ViewBag.IsLoadKendo = true;
    @using Newtonsoft.Json
}

<link rel="stylesheet" type="text/css" href="~/css/select2.min.css?ID=@ViewBag.GUID">

<style>
    .tabs-container #tab3:checked ~ #content3,
    .tabs-container #tab2:checked ~ #content2,
    .tabs-container #tab1:checked ~ #content1 {
        display: block;
    }
</style>


<!--Wrapper Start -->
<div class="container-fluid pt-4 pb-4 ps-1 pe-1 bg-white rounded">

    <div class="logo text-center border-bottom">
        <h3 class="box-title mb-3">User Setup</h3>
    </div>

    @Html.Hidden("RightsList", (object)ViewBag.RightsList)
    @Html.Hidden("RolesList", (object)ViewBag.RolesList)

    <div class="row tabs-container">
        <div class="col-lg-12 col-md-12 col-sm-12 tab-content" id="mainUserSetup">
            @if (ViewBag.RightsListObj.IsView)
            {
                <input id="tab1" type="radio" name="tabs" checked>
                <label for="tab1" class="tabs-label"><i>User</i>User Information</label>
            }
            <section id="content1">
                <div class="row">
                    <div class="col-lg-12" style="font-size:0.75em" id="tablerecord">
                        <div class="w-100 text-right">
                            <div class="button-group">
                                <button type="button" class="btn btn-lg px-4 fs-4 font-weight-medium Theme-button" style="display: none" id="usersetupmodalbutton" onclick="GetAddEditUserSetupModal('');">+ Add New User</button>
                            </div>
                        </div>
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <div class="panel box box-info">
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="col-md-12 col-sm-12 col-xs-12">
                                            <div id="grid"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>

</div>
<!--Wrapper End -->

<script src="~/js/GridFilter2.js?ID=@ViewBag.GUID"></script>
<script src="~/js/select2.js?ID=@ViewBag.GUID" type="text/javascript"></script>
<script src="~/js/custom-Validation.js?ID=@ViewBag.GUID"></script>

@section scripts {
    <script>
        var RightsList = JSON.parse($("#RightsList").val());
        var RolesList = JSON.parse($("#RolesList").val());

        KendoDateInitial();
        SetPageRights();

        //Load Grids
        if (RightsList.IsView) {
            UserGridLoad();
            $("#tab1").change(function () {
                if ($(this).is(":checked")) {
                    if ($("#grid").data("kendoGrid")) {
                        return;
                    }
                    UserGridLoad();
                }
            });
        }

        function SetPageRights() {
            if (RightsList.IsAdd) {
                $('#usersetupmodalbutton').show();
            }
        }

        //User ************************************************************* Start */
        function UserGridLoad() {
            var kendogridid = 'grid';
            var pagesize = 30;
            $("#PageLoader").show();
            $("#" + kendogridid).empty();
            $("body").removeClass("modal-open");
            $('#User_Form_Modal').hide();
            var Userfieldstype = {
                RowNo: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                User_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                AppName: { type: KendoFilterTypes.String, srtype: SRVTypes.UpperString },
                RoleName: { type: KendoFilterTypes.String, srtype: SRVTypes.UpperString },
                UserName: { type: KendoFilterTypes.String, srtype: SRVTypes.UpperString },
                Email: { type: KendoFilterTypes.String, srtype: SRVTypes.UpperString },
                FirstName: { type: KendoFilterTypes.String, srtype: SRVTypes.UpperString },
                LastName: { type: KendoFilterTypes.String, srtype: SRVTypes.UpperString },
                UserType: { type: KendoFilterTypes.String, srtype: SRVTypes.UpperString },
                PasswordExpiry: { type: KendoFilterTypes.String, srtype: SRVTypes.UpperString },
                TelegramID: { type: KendoFilterTypes.String, srtype: SRVTypes.UpperString },
                TelegramUserName: { type: KendoFilterTypes.String, srtype: SRVTypes.UpperString },
                BlockType: { type: KendoFilterTypes.String, srtype: SRVTypes.UpperString },
                IsApproved: { type: KendoFilterTypes.Boolean, srtype: SRVTypes.Boolean },
                IsActive: { type: KendoFilterTypes.Boolean, srtype: SRVTypes.Boolean },
            }
            var _griddatasource = GetGridDataSourceAjaxCommon(kendogridid, pagesize, "/Security/GetUsersList", true, true, true, Userfieldstype, false, false);
            dataSource = _griddatasource
            $("#" + kendogridid).kendoGrid({
                dataSource: dataSource,
                responsive: false,
                pageable: {
                    alwaysVisible: true,
                    refresh: true,
                    pageSizes: [30, 50, 100, 500, 1000, 5000],
                    messages: {
                        display: "{0} - {1} of {2} items &nbsp;&nbsp;|&nbsp;&nbsp; Export:&nbsp;<img id='" + kendogridid + "_exportExcel' title='Click here to export to excel file' src='/icon/excel_icon.jpg' style='width:23px; height:23px; cursor:pointer' onclick='onClickExportExcel(this)' /> ",
                        empty: "No data found",
                    }
                },
                controllername: "Report",
                controllermethodname: "ExportInExcel_UsersDetail",
                sortable: true,
                resizable: false,
                reorderable: false,
                noRecords: true,
                filterable: {
                    extra: true,
                },
                customfixheader: false,
                pageloaderid: "PageLoader",
                dataBound: onKendoDataBound,
                dataBinding: function (e) {
                    $("#PageLoader").hide();
                },
                columns: [
                    {
                        field: "RowNo",
                        title: "Sr.No",
                        width: 80,
                        filterable: false,
                        sortable: false
                    },
                    {
                        field: "User_ID",
                        title: "USER ID",
                        width: 110,
                        filterable: { extra: false, operators: { number: { eq: "equal" } } }
                    },
                    {
                        field: "UserName", title: "User Name", width: 150,
                        filterable: { extra: false, operators: { string: { contains: "contains", eq: "contain" } } }
                    },
                    {
                        field: "AppName",
                        title: "Application Name",
                        width: 180,
                        filterable: { extra: false, operators: { string: { contains: "contain" } } }
                    },
                    {
                        field: "RoleName",
                        title: "Role Name",
                        width: 150,
                        filterable: { extra: false, operators: { string: { contains: "contain" } } }
                    },
                    {
                        field: "Email",
                        title: "Email",
                        width: 180,
                        filterable: { extra: false, operators: { string: { contains: "contain" } } }
                    },
                    {
                        field: "FirstName",
                        title: "First Name",
                        width: 150,
                    },
                    {
                        field: "LastName",
                        title: "Last Name",
                        width: 150,
                    },
                    {
                        field: "PasswordExpiry",
                        title: "Password Expiry",
                        width: 150,
                        filterable: false
                    },
                    {
                        field: "TelegramID",
                        title: "Telegram ID",
                        width: 180,
                        filterable: { extra: false, operators: { string: { contains: "contain" } } }
                    },
                    {
                        field: "TelegramUserName",
                        title: "Telegram Name",
                        width: 180,
                        filterable: { extra: false, operators: { string: { contains: "contain" } } }
                    },
                    {
                        field: "BlockType",
                        title: "Block Type",
                        width: 180,
                        filterable: { extra: false, operators: { string: { contains: "contain" } } }
                    },
                    {
                        field: "IsApproved",
                        title: "IsApproved",
                        width: 120,
                    },
                    {
                        field: "IsActive", title: "Is Active", width: 120,
                        template: function (dataItem) {
                            if (RightsList.IsDelete) {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png" alt="Active" onclick="User_Remove(this,\'' + dataItem.Encrypted_USER_ID + '\',\'' + dataItem.UserName + '\',' + dataItem.IsActive + ');"/>';
                                } else {
                                    return '<img src="../icon/cross.png" alt="Inactive" onclick="User_Remove(this,\'' + dataItem.Encrypted_USER_ID + '\',\'' + dataItem.UserName + '\',' + dataItem.IsActive + ');"/>';
                                }
                            }
                            else {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png"/>';
                                } else {
                                    return '<img src="../icon/cross.png"/>';
                                }
                            }
                        },
                        attributes: {
                            style: "text-align: center;"
                        }
                    },
                    {

                        title: "Action",
                        width: 100,
                        filterable: false,
                        template: function (dataItem) {
                            var actionfield = '';
                            if (RightsList.IsEdit) {
                                actionfield = '<a><i class="fa fa-edit Theme-icon fa-1x ms-1 cursor-pointer" onclick="GetAddEditUserSetupModal(\'' + dataItem.Encrypted_USER_ID + '\');"></i></a>';
                            }
                            return actionfield;
                        }

                    },
                ],
                detailInit: function (e) {
                    $("#PageLoader").hide();
                }
            });
        }

        function GetAddEditUserSetupModal(Encrypted_USER_ID) {
            // if ((Encrypted_USER_ID == "" && RigthsList.IsAdd == true) || (Encrypted_USER_ID != "" && RigthsList.IsEdit == true)) {
            GetAddEditModalAjaxCommon(Encrypted_USER_ID, "/Security/GetAddEditUserModal", function (res) {
                Select2Initial("UserType_MTV_CODE", false);
                Select2Initial("BlockType_MTV_CODE", false);
                Select2MultiInitial("Application", false);
                Select2Initial("Role", false);
                KendoDateTimeInitial("PasswordExpiryDateTime", false);
            });
            // } else {
            // WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
            // $("#PageLoader").hide();
            // return;
            // }
        }
        function AddOrEditUser() {
            var ObjJson = new Object();
            ObjJson.User_ID = $("#User_ID").val();
            ObjJson.UserName = $("#UserName").val();
            ObjJson.Password = $("#Password").val();
            ObjJson.ConfirmPassword = $("#ConfirmPassword").val();
            ObjJson.Email = $("#Email").val();
            ObjJson.TelegramUserName = $("#TelegramUserName").val();
            ObjJson.TelegramID = $("#TelegramID").val();
            ObjJson.FirstName = $("#FirstName").val();
            ObjJson.LastName = $("#LastName").val();
            ObjJson.PasswordExpiryDateTime = $("#PasswordExpiryDateTime").val();
            ObjJson.UserType_MTV_CODE = $("#UserType_MTV_CODE").val();
            ObjJson.BlockType_MTV_CODE = $("#BlockType_MTV_CODE").val();
            ObjJson.IsApproved = $("#IsApproved").is(":checked");
            ObjJson.IsTempPassword = $("#IsTempPassword").is(":checked");

            if (ObjJson.UserName == "") {
                toastr.error("User Name is Required!");
                return;
            }

            if (ObjJson.User_ID == undefined && ObjJson.Password == "") {
                toastr.error("Password is Required!");
                return;
            }

            if (ObjJson.User_ID == undefined && ObjJson.ConfirmPassword == "") {
                toastr.error("Confirm Password is Required!");
                return;
            }

            if (ObjJson.User_ID == undefined && ObjJson.Password != ObjJson.ConfirmPassword) {
                toastr.error("Pasword and Confirm Password not matched!");
                return;
            }

            var JsonData = JSON.stringify(ObjJson);
            AddEditRemoveAjaxCommon(JsonData, "/Security/AddOrEdit_User", null, false, 'grid');
        }
        function User_Remove(this_, Encrypted_USER_ID, UserName, IsActive) {
            if (RightsList.IsDelete) {
                if ($(this_).attr("disabled") == "disabled") {
                    return;
                }
                $(this_).attr("disabled", "disabled");
                IsActiveEditCommon(Encrypted_USER_ID, "/Security/Remove_User", null, UserName, IsActive, "User Name", 'grid');
            } else {
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }

        //User ************************************************************* End */

        function onCustomFilterValidate(id, IsRun, IsClearFilter) {
            var resultjson = { issuccess: false, customfilterjson: [] };
            resultjson = onCustomFilter(false, id);
            if (resultjson.issuccess) {
                var grid = $("#" + id).data("kendoGrid");
                if (grid == undefined && IsRun == false) {
                    return;
                }
                else if (IsRun == true && grid == undefined) {
                    if (id == "grid") {
                        PageGroupGridLoad();
                        return;
                    }
                    else if (id == "grid1") {
                        PageGridLoad();
                        return;
                    }
                }

                if (IsClearFilter == true) {
                    ResetGridFilter(id);
                    return;
                }
                else {
                    RefreshGridData(id);
                    return;
                }
            }
        }
        var lastcustomreportFilterObjectList = [];
        function onCustomFilter(IsGetLastSaved, id) {

            IsGetLastSaved = (IsGetLastSaved == undefined ? false : IsGetLastSaved);
            var customreportFilterObjectList = [];
            var resultjson = { issuccess: false, customfilterjson: customreportFilterObjectList };
            var reportFilterObject = { code: "", name: "", isFilterApplied: false, reportFilterObjectArry: [] };
            var filterobject = new Object();

            var specificreportFilterObjectList = [];
            var specificreportFilterObject = { code: "", name: "", isFilterApplied: false, reportFilterObjectArry: [] };
            var specificfilterobject = new Object();

            if (IsGetLastSaved) {
                if (lastcustomreportFilterObjectList.length > 0) {
                    for (var i = 0; i <= lastcustomreportFilterObjectList.length - 1; i++) {
                        if (lastcustomreportFilterObjectList[i].id == id) {
                            resultjson = { issuccess: true, customfilterjson: lastcustomreportFilterObjectList[i].customfilterjson };
                            return resultjson;
                        }
                    }
                }
            }

            if ($('#txtdate').val() != "" && $('#txtenddate').val() != "") {
                SetCustomFilterValue(customreportFilterObjectList, reportFilterObject, filterobject, "and", $('#txtdate').val(), KendoGridFilterType.isequalorgreather, KendoFilterTypes.Date, SRVTypes.Date, false, 0, "Created_On_Date", "Created_On_Date", false);
                SetCustomFilterValue(customreportFilterObjectList, reportFilterObject, filterobject, "and", $('#txtenddate').val(), KendoGridFilterType.isequalorless, KendoFilterTypes.Date, SRVTypes.Date, false, 0, "Created_On_Date", "Created_On_Date", true);

                onSpecificFilter(id, specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, "and", $('#txtdate').val()
                    , KendoGridFilterType.isequalorgreather, KendoFilterTypes.Date, SRVTypes.Date, false, 0, "Created_On_Date", "Created_On_Date", false);
                onSpecificFilter(id, specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, "and", $('#txtenddate').val()
                    , KendoGridFilterType.isequalorless, KendoFilterTypes.Date, SRVTypes.Date, false, 0, "Created_On_Date", "Created_On_Date", true);
            }

            if ($('#txtOrigHub').val() != "") {
                SetCustomFilterValue(customreportFilterObjectList, reportFilterObject, filterobject, "and", $('#txtOrigHub').val(), KendoGridFilterType.inlistfilter, KendoFilterTypes.String, SRVTypes.UpperString, false, 0, "OrigHub", "OrigHub", false);
            }

            if (specificreportFilterObjectList.length > 0) {
                for (var i = 0; i < specificreportFilterObjectList.length; i++) {
                    customreportFilterObjectList.push(specificreportFilterObjectList[i]);
                }
            }

            if (lastcustomreportFilterObjectList.length > 0) {
                for (var i = 0; i <= lastcustomreportFilterObjectList.length - 1; i++) {
                    if (lastcustomreportFilterObjectList[i].id == id) {
                        resultjson = { issuccess: true, customfilterjson: lastcustomreportFilterObjectList[i].customfilterjson };
                        break;
                    }
                }
            }

            var isexistscustomfilterjson = false;
            if (lastcustomreportFilterObjectList.length > 0) {
                for (var i = 0; i <= lastcustomreportFilterObjectList.length - 1; i++) {
                    if (lastcustomreportFilterObjectList[i].id == id) {
                        var lastcustomreportFilterObject = new Object();
                        lastcustomreportFilterObject.id = id;
                        lastcustomreportFilterObject.customfilterjson = customreportFilterObjectList;
                        lastcustomreportFilterObjectList[i] = lastcustomreportFilterObject;
                        isexistscustomfilterjson = true;
                        break;
                    }
                }
            }
            if (isexistscustomfilterjson == false) {
                var lastcustomreportFilterObject = new Object();
                lastcustomreportFilterObject.id = id;
                lastcustomreportFilterObject.customfilterjson = customreportFilterObjectList;
                lastcustomreportFilterObjectList.push(lastcustomreportFilterObject);
            }

            resultjson = { issuccess: true, customfilterjson: customreportFilterObjectList };

            return resultjson;
        }
        function onSpecificFilter(id, specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, logic, value, filtertype, fieldtype, srvfieldtype, islist, listtype, code, name, isprevioussamecode, isgridfilter = false) {
            if (code == 'Created_On_Date' && isgridfilter == false) {
                var dateObject = new Date(value)
                dateObject.setDate(dateObject.getDate() + (isprevioussamecode == false ? -1 : 1));
                var newvalue = formatDateToDateTime(dateObject, false);
                SetCustomFilterValue(specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, logic, newvalue, filtertype, fieldtype, srvfieldtype, islist, listtype, "UTC_Created_On_Date", "UTC_Created_On_Date", isprevioussamecode);
            }
            else if (code == 'Created_On_Date' && isgridfilter == true) {
                var dateObject = new Date(value)
                dateObject.setDate(dateObject.getDate() - 1);
                var newvalue = formatDateToDateTime(dateObject, false);
                SetCustomFilterValue(specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, logic, newvalue, KendoGridFilterType.isequalorgreather, fieldtype, srvfieldtype, islist, listtype, "UTC_Created_On_Date", "UTC_Created_On_Date", isprevioussamecode);

                dateObject = new Date(value)
                dateObject.setDate(dateObject.getDate() + 1);
                newvalue = formatDateToDateTime(dateObject, false);
                SetCustomFilterValue(specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, logic, newvalue, KendoGridFilterType.isequalorless, fieldtype, srvfieldtype, islist, listtype, "UTC_Created_On_Date", "UTC_Created_On_Date", true);
            }
        }
        function onReset() {
            $("#PageLoader").show();
            $('#txtdate').val($("#originalstartdate").val());
            $('#txtOrigHub').html($("#hublist").html());
            $('#txtClientID').html($("#clientlist").html())
            $("#PageLoader").hide();
            onCustomFilterValidate('grid', false, true)
        }
    </script>
}
