@{
    ViewBag.Title = "Page Setup";
    Layout = "~/Views/Shared/_Masterpage.cshtml";
    ViewBag.IsLoadKendo = true;
}

<link rel="stylesheet" type="text/css" href="~/css/select2.min.css?ID=@ViewBag.GUID">

<style>
    .tabs-container #tab2:checked ~ #content2,
    .tabs-container #tab1:checked ~ #content1 {
        display: block;
    }
</style>

<!--Wrapper Start -->
<div class="container-fluid pt-4 pb-4 ps-1 pe-1 bg-white rounded">

    <div class="logo text-center border-bottom">
        <h3 class="box-title mb-3">Page Setup</h3>
    </div>

    <div class="row tabs-container">
        <div class="col-lg-12 col-md-12 col-sm-12 tab-content">
            @if (ViewBag.RightsListObj.IsView)
            {
                <input id="tab1" type="radio" name="tabs" checked>
                <label for="tab1" class="tabs-label"><i>PG</i>Page Group</label>
                <input id="tab2" type="radio" name="tabs">
                <label for="tab2" class="tabs-label"><i>P</i>Page</label>
            }
            @Html.Hidden("PageGroupList", (object)ViewBag.PageGroupList)
            @Html.Hidden("PageList", (object)ViewBag.PageList)
            @Html.Hidden("RightsList", (object)ViewBag.RightsList)
            @Html.Hidden("ApplicationList", (object)ViewBag.ApplicationList)

            <section id="content1">
                <div class="row">
                    <div class="col-lg-12" style="font-size:0.75em" id="tablerecord">
                        <div class="w-100 text-right">
                            <div class="button-group">
                                <button type="button" class="btn btn-lg px-4 fs-4 font-weight-medium Theme-button" style="display: none" id="pagegroupsortingbutton" onclick="GetPageGroupSorting();">Page Group Sorting</button>
                                <button type="button" class="btn btn-lg px-4 fs-4 font-weight-medium Theme-button" style="display: none" id="pagegroupmodalbutton" onclick="GetAddEditPageGroupModal('');">+ Add New Page Group</button>
                            </div>
                        </div>
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <div class="panel box box-info">
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="col-md-12 col-sm-12 col-xs-12">
                                            <div id="grid"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <section id="content2">
                <div class="row">
                    <div class="col-lg-12" style="font-size:0.75em" id="tablerecord">
                        <div class="w-100 text-right">
                            <button type="button" class="btn btn-lg px-4 fs-4 font-weight-medium Theme-button" style="display: none" id="pagemodalbutton" onclick="GetAddEditPageModal('');">+ Add New Pages</button>
                        </div>
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <div class="panel box box-info">
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="col-md-12 col-sm-12 col-xs-12">
                                            <div id="grid1"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

        </div>
    </div>

</div>

<!--Wrapper End -->

<script src="~/js/GridFilter2.js?ID=@ViewBag.GUID"></script>
<script src="~/js/select2.js?ID=@ViewBag.GUID" type="text/javascript"></script>
<script src="~/js/custom-Validation.js?ID=@ViewBag.GUID"></script>

@section scripts {
    @* Intialization *@
    <script>
        var PageGroupList = JSON.parse($("#PageGroupList").val());
        var PageList = JSON.parse($("#PageList").val());
        var ApplicationList = JSON.parse($("#ApplicationList").val());
        var RightsList = JSON.parse($("#RightsList").val());

        KendoDateInitial();
        Select2Initial();
        SetPageRights();
        //Load Grids
        if (RightsList.IsView) {
            PageGroupGridLoad();
            $("#tab1").change(function () {
                if ($(this).is(":checked")) {
                    if ($("#grid").data("kendoGrid")) {
                        return;
                    }
                    PageGroupGridLoad();
                }
            });
            $("#tab2").change(function () {
                if ($(this).is(":checked")) {
                    if ($("#grid1").data("kendoGrid")) {
                        return;
                    }
                    PageGridLoad();
                }
            });
        }

        function SetPageRights() {
            if (RightsList.IsAdd) {
                $('#pagegroupsortingbutton').show();
                $('#pagegroupmodalbutton').show();
                $('#pagemodalbutton').show();
            } 
        }

        function PageGroupGridLoad() {
            var kendogridid = 'grid';
            var pagesize = 30;
            $("#PageLoader").show();
            $("#" + kendogridid).empty();
            var PageGroupfieldstype = {
                RowNo: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                PG_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                PageGroupName: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                Sort_: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                IsHide: { type: KendoFilterTypes.Boolean, srtype: SRVTypes.Boolean },
                IsActive: { type: KendoFilterTypes.Boolean, srtype: SRVTypes.Boolean },
            }
            var _griddatasource = GetGridDataSourceAjaxCommon(kendogridid, pagesize, "/Security/GetPageGroupsList", true, true, true, PageGroupfieldstype, false, false);
            $("#" + kendogridid).kendoGrid({
                dataSource: _griddatasource,
                responsive: false,
                pageable: {
                    alwaysVisible: true,
                    refresh: true,
                    pageSizes: [30, 50, 100, 500, 1000, 5000],
                    messages: {
                        display: "{0} - {1} of {2} items &nbsp;&nbsp;|&nbsp;&nbsp; Export:&nbsp;<img id='" + kendogridid + "_exportExcel' title='Click here to export to excel file' src='/icon/excel_icon.jpg' style='width:23px; height:23px; cursor:pointer' onclick='onClickExportExcel(this)' /> ",
                        empty: "No data found",
                    }
                },
                controllername: "Report", //custom fields for ExportToExcel function
                controllermethodname: "ExportInExcel_PageGroupDetail", //custom fields for ExportToExcel function
                //recordsLimit: 10000,
                sortable: true,
                resizable: false,
                reorderable: false,
                noRecords: true,
                filterable: {
                    extra: true,
                    //operators: KendoOperatorListOfString,
                },
                customfixheader: false, //custom fields for onKendoDataBound function
                pageloaderid: "PageLoader", //custom fields for onKendoDataBound function
                dataBound: onKendoDataBound,
                dataBinding: function (e) {
                    $("#PageLoader").hide();
                },
                columns: [
                    {
                        field: "RowNo",
                        title: "#",
                        width: 60,
                        filterable: false,
                        sortable: false,
                        // hidden: GetCheckboxValueFromClassAndAttribute('div_' + kendogridid + '_columnhideshowexpandcollaspe', 'RowNo', '#'),
                        // orderIndex: GetOrderIndexFromClassAndAttribute('div_' + kendogridid + '_columnhideshowexpandcollaspe', 'RowNo', '#'),
                        // showinexcel: true, //optional default is based on hidden or visible true or false
                        // originalfield: "", //optional default is based on field
                        // excelcolumntype: ExcelColumnTypes.General, //optional default value is General
                    },
                    {
                        field: "PG_ID",
                        title: "Page ID",
                        width: 135,
                        filterable: false,
                        hidden: true,
                        // hidden: GetCheckboxValueFromClassAndAttribute('div_' + kendogridid + '_columnhideshowexpandcollaspe', 'PG_ID', 'Page ID'),
                        // orderIndex: GetOrderIndexFromClassAndAttribute('div_' + kendogridid + '_columnhideshowexpandcollaspe', 'PG_ID', 'Page ID'),
                    },
                    {
                        field: "PG_ID",
                        title: "Page Group Name",
                        width: 190,
                        // hidden: GetCheckboxValueFromClassAndAttribute('div_' + kendogridid + '_columnhideshowexpandcollaspe', 'PageGroupName', 'Page Group Name'),
                        // orderIndex: GetOrderIndexFromClassAndAttribute('div_' + kendogridid + '_columnhideshowexpandcollaspe', 'PageGroupName', 'Page Group Name'),
                        template: function (dataItem) {
                            return dataItem.PageGroupName;
                        },
                        filterable: { multi: true, extra: false, search: true, checkAll: false },
                        values: PageGroupList,
                        originalfield: "PageGroupName",
                    },
                    {
                        field: "Sort_",
                        title: "Sort_",
                        // hidden: GetCheckboxValueFromClassAndAttribute('div_' + kendogridid + '_columnhideshowexpandcollaspe', 'Sort_', 'Sort_'),
                        // orderIndex: GetOrderIndexFromClassAndAttribute('div_' + kendogridid + '_columnhideshowexpandcollaspe', 'Sort_', 'Sort_'),
                        width: 100,
                        filterable: { extra: false, operators: { string: { contains: "equals" } } }
                    },
                    {
                        field: "IsHide",
                        title: "IsHide",
                        width: 90,
                        // hidden: GetCheckboxValueFromClassAndAttribute('div_' + kendogridid + '_columnhideshowexpandcollaspe', 'IsHide', 'IsHide'),
                        // orderIndex: GetOrderIndexFromClassAndAttribute('div_' + kendogridid + '_columnhideshowexpandcollaspe', 'IsHide', 'IsHide'),
                    },
                    {
                        field: "IsActive",
                        title: "IsActive",
                        width: 100,
                        // hidden: GetCheckboxValueFromClassAndAttribute('div_' + kendogridid + '_columnhideshowexpandcollaspe', 'IsActive', 'IsActive'),
                        // orderIndex: GetOrderIndexFromClassAndAttribute('div_' + kendogridid + '_columnhideshowexpandcollaspe', 'IsActive', 'IsActive'),
                        template: function (dataItem) {
                            if (RightsList.IsEdit) {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png" alt="Active" class="cursor-pointer" onclick="PageGroup_Remove(this,' + "'" + dataItem.Ery_PG_ID + "'," + dataItem.RowNo + "," + dataItem.IsActive + ');"/>';
                                } else {
                                    return '<img src="../icon/cross.png" alt="Inactive" class="cursor-pointer" onclick="PageGroup_Remove(this,' + "'" + dataItem.Ery_PG_ID + "'," + dataItem.RowNo + "," + dataItem.IsActive + ');"/>';
                                }
                            }
                            else {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png" alt="Active"/>';
                                } else {
                                    return '<img src="../icon/cross.png" alt="Inactive"/>';
                                }
                            }
                        },
                        attributes: {
                            style: "text-align: center;"
                        }
                    },
                    {
                        title: "Action",
                        width: 100,
                        // hidden: GetCheckboxValueFromClassAndAttribute('div_' + kendogridid + '_columnhideshowexpandcollaspe', 'Action', 'Action'),
                        // orderIndex: GetOrderIndexFromClassAndAttribute('div_' + kendogridid + '_columnhideshowexpandcollaspe', 'Action', 'Action'),
                        filterable: false,
                        template: function (dataItem) {
                            var actionfield = '';
                            if (RightsList.IsEdit) {
                                actionfield = '<a id="EditPageGroupBtn" class=""><i class="fa fa-edit Theme-icon fa-1x ms-1 cursor-pointer" onclick="GetAddEditPageGroupModal(' + "'" + dataItem.Ery_PG_ID + "'" + ');"></i></a>';
                            }
                            return actionfield;
                        },
                        showinexcel: false
                    },
                ],
                detailInit: function (e) {
                    $("#PageLoader").hide();
                }
            });
        }
        function GetAddEditPageGroupModal(Encrypted_PG_ID) {
            if ((RightsList.IsAdd == true) || (RightsList.IsEdit == true)) {
                GetAddEditModalAjaxCommon(Encrypted_PG_ID, "/Security/GetAddEditPageGroupModal");
            } else{
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }
        function AddOrEditPageGroup() {
            var ObjJson = new Object();
            ObjJson.PG_ID = $("#modalpagegroupid").val();
            ObjJson.PageGroupName = $("#modalpagegroupname").val();
            ObjJson.IsHide = $("#modalpagegroupishide").is(":checked");
            ObjJson.Active = $("#modalpgisactive").is(":checked");
            var JsonData = JSON.stringify(ObjJson);
            requiredFields = ['PageGroupName'];
            if (!validateRequiredFields(ObjJson, requiredFields)) {
                return;
            }
            AddEditRemoveAjaxCommon(JsonData, "/Security/AddOrEdit_PageGroup", null, false, 'grid');
        }
        function PageGroup_Remove(this_, Ery_PG_ID, RowNo, IsActive) {
            if (RightsList.IsDelete) {
                if ($(this_).attr("disabled") == "disabled") {
                    return;
                }
                $(this_).attr("disabled", "disabled");
                IsActiveEditCommon(Ery_PG_ID, "/Security/Remove_PageGroup", null, RowNo, IsActive, "Row No", 'gird');
            } else {
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }
        function GetPageGroupSorting() {
            GetSortingAjaxCommon(null, "/Security/Get_PageGroup_Sorting", "Update_PageGroup_Sorting()");
            $('#Sorting-modal').modal({
                backdrop: false
            });
            $('#Sorting-modal').modal('show');
        }
        function Update_PageGroup_Sorting() {
            var json = JSON.stringify(getSortingValues());
            AddEditRemoveAjaxCommon(json, "/Security/Update_PageGroup_Sorting", null, false, 'grid');
        }

        function PageGridLoad() {
            var kendogridid = 'grid1';
            var pagesize = 30;
            $("#PageLoader").show();
            $("#" + kendogridid).empty();
            var Pagefieldstype = {
                RowNo: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                P_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                PG_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                Application_MTV_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                PageGroupName: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                PageName: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                PageURL: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                Application: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                Sort_: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                IsHide: { type: KendoFilterTypes.Boolean, srtype: SRVTypes.Boolean },
                IsActive: { type: KendoFilterTypes.Boolean, srtype: SRVTypes.Boolean },
            }
            var _griddatasource = GetGridDataSourceAjaxCommon(kendogridid, pagesize, "/Security/GetPagesList", true, true, true, Pagefieldstype, false, false);
            $("#" + kendogridid).kendoGrid({
                dataSource: _griddatasource,
                responsive: false,
                pageable: {
                    alwaysVisible: true,
                    refresh: true,
                    pageSizes: [30, 50, 100, 500, 1000, 5000],
                    messages: {
                        display: "{0} - {1} of {2} items &nbsp;&nbsp;|&nbsp;&nbsp; Export:&nbsp;<img id='" + kendogridid + "_exportExcel' title='Click here to export to excel file' src='/icon/excel_icon.jpg' style='width:23px; height:23px; cursor:pointer' onclick='onClickExportExcel(this)' /> ",
                        empty: "No data found",
                    }
                },
                controllername: "Report", //custom fields for ExportToExcel function
                controllermethodname: "ExportInExcel_PageDetail", //custom fields for ExportToExcel function
                //recordsLimit: 10000,
                sortable: true,
                resizable: false,
                reorderable: false,
                noRecords: true,
                filterable: {
                    extra: true,
                    //operators: KendoOperatorListOfString,
                },
                customfixheader: false, //custom fields for onKendoDataBound function
                pageloaderid: "PageLoader", //custom fields for onKendoDataBound function
                dataBound: onKendoDataBound,
                dataBinding: function (e) {
                    $("#PageLoader").hide();
                },
                columns: [
                    {
                        field: "RowNo",
                        title: "#",
                        width: 50,
                        filterable: false,
                        sortable: false,
                    },
                    {
                        field: "PG_ID",
                        title: "PG ID",
                        width: 100,
                        filterable: { extra: false, operators: { string: { contains: "equals" } } }
                    },
                    {
                        field: "PG_ID",
                        title: "Page Group Name",
                        width: 180,
                        template: function (dataItem) {
                            return dataItem.PageGroupName;
                        },
                        filterable: { multi: true, extra: false, search: true, checkAll: false },
                        values: PageGroupList,
                        originalfield: "PageGroupName",
                    },
                    {
                        field: "P_ID",
                        title: "Page ID",
                        width: 110,
                        filterable: { extra: false, operators: { string: { contains: "equals" } } }
                    },
                    {
                        field: "P_ID",
                        title: "Page Name",
                        width: 180,
                        template: function (dataItem) {
                            return dataItem.PageName;
                        },
                        filterable: { multi: true, extra: false, search: true, checkAll: false },
                        values: PageList,
                        originalfield: "PageName",
                    },
                    {
                        field: "PageURL",
                        title: "Page URL",
                        width: 200,
                        filterable: { extra: false, operators: { string: { contains: "contains" } } }
                    },
                    {
                        field: "Application_MTV_ID",
                        title: "Application ID",
                        width: 180,
                        filterable: { extra: false, operators: { string: { contains: "equals" } } }
                    },
                    {
                        field: "Application_MTV_ID",
                        title: "Application",
                        width: 200,
                        template: function (dataItem) {
                            return dataItem.Application;
                        },
                        filterable: { multi: true, extra: false, search: true, checkAll: false },
                        values: ApplicationList,
                        originalfield: "Application",
                    },
                    {
                        field: "Sort_",
                        title: "Sort_",
                        width: 100,
                        filterable: { extra: false, operators: { string: { contains: "equals" } } }
                    },
                    {
                        field: "IsHide",
                        title: "IsHide",
                        width: 110,
                    },
                    {
                        field: "IsActive",
                        title: "IsActive",
                        width: 100,
                        template: function (dataItem) {
                            if (RightsList.IsEdit) {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png" alt="Active" onclick="Page_Remove(this,' + "'" + dataItem.Ery_P_ID + "'," + dataItem.RowNo + "," + dataItem.IsActive + ');"/>';
                                } else {
                                    return '<img src="../icon/cross.png" alt="Inactive" onclick="Page_Remove(this,' + "'" + dataItem.Ery_P_ID + "'," + dataItem.RowNo + "," + dataItem.IsActive + ');"/>';
                                }
                            }
                            else {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png"/>';
                                } else {
                                    return '<img src="../icon/cross.png"/>';
                                }
                            }
                        },
                        attributes: {
                            style: "text-align: center;"
                        }
                    },
                    {
                        title: "Action",
                        width: 100,
                        filterable: false,
                        template: function (dataItem) {
                            var actionfield = '';
                            if (RightsList.IsEdit) {
                                actionfield += '<a><i class="fa fa-edit Theme-icon fa-1x ms-1 cursor-pointer" onclick="GetAddEditPageModal(' + "'" + dataItem.Ery_P_ID + "'" + ');"></i></a>'
                                actionfield += '<a><i class="fa fa-sort Theme-icon fa-1x ms-1 cursor-pointer" onclick="GetPageSorting(this,' + "'" + dataItem.Ery_PG_ID + "'" + ');"></i></a>';
                            }
                            return actionfield;
                        },
                        showinexcel: true,
                    },
                ],
                detailInit: function (e) {
                    $("#PageLoader").hide();
                }
            });
        }
        function GetAddEditPageModal(Encrypted_P_ID) {
            if ((RightsList.IsAdd == true) || (RightsList.IsEdit == true)) {
                GetAddEditModalAjaxCommon(Encrypted_P_ID, "/Security/GetAddEditPageModal");
            } else {
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }
        function AddOrEditPage() {
            var ObjJson = new Object();
            ObjJson.P_ID = $("#modalpageid").val();
            ObjJson.PG_ID = $("#modalSelectPageGroupName option:selected").val();
            ObjJson.PageName = $("#modalpagename").val();
            ObjJson.PageURL = $("#modalpageurl").val();
            ObjJson.Application_MTV_ID = $("#modalApplication_MTV_ID option:selected").val();
            ObjJson.IsHide = $("#modalpageishide").is(":checked");
            ObjJson.Active = $("#modalpisactive").is(":checked");
            var JsonData = JSON.stringify(ObjJson);
            requiredFields = ['PG_ID', 'PageName', 'PageURL', 'Application_MTV_ID'];
            if (!validateRequiredFields(ObjJson, requiredFields)) {
                return;
            }
            AddEditRemoveAjaxCommon(JsonData, "/Security/AddOrEdit_Page", null, false, 'grid1');
        }
        function Page_Remove(this_, Ery_P_ID, RowNo, IsActive) {
            if (RightsList.IsDelete) {
                if ($(this_).attr("disabled") == "disabled") {
                    return;
                }
                $(this_).attr("disabled", "disabled");
                IsActiveEditCommon(Ery_P_ID, "/Security/Remove_Page", null, RowNo, IsActive, "Row No", 'grid1');
            } else {
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }

        function GetPageSorting(this_, Ery_PG_ID) {
            if ($(this_).attr("disabled") == "disabled") {
                return;
            }
            $(this_).attr("disabled", "disabled");
            GetSortingAjaxCommon(Ery_PG_ID, "/Security/Get_Page_Sorting", "Update_Page_Sorting()");
            $('#Sorting-modal').modal({
                backdrop: true
            });
            $('#Sorting-modal').modal('show');
        }
        function Update_Page_Sorting() {
            var json = JSON.stringify(getSortingValues());
            AddEditRemoveAjaxCommon(json, "/Security/Update_Page_Sorting", null, false, 'grid1');
        }

        function onCustomFilterValidate(id, IsRun, IsClearFilter) {
            var resultjson = { issuccess: false, customfilterjson: [] };
            resultjson = onCustomFilter(false, id);
            if (resultjson.issuccess) {
                var grid = $("#" + id).data("kendoGrid");
                if (grid == undefined && IsRun == false) {
                    return;
                }
                else if (IsRun == true && grid == undefined) {
                    if (id == "grid") {
                        PageGroupGridLoad();
                        return;
                    }
                    else if (id == "grid1") {
                        PageGridLoad();
                        return;
                    }
                }

                if (IsClearFilter == true) {
                    ResetGridFilter(id);
                    return;
                }
                else {
                    RefreshGridData(id);
                    return;
                }
            }
        }

        var lastcustomreportFilterObjectList = [];
        function onCustomFilter(IsGetLastSaved, id) {

            IsGetLastSaved = (IsGetLastSaved == undefined ? false : IsGetLastSaved);
            var customreportFilterObjectList = [];
            var resultjson = { issuccess: false, customfilterjson: customreportFilterObjectList };
            var reportFilterObject = { code: "", name: "", isFilterApplied: false, reportFilterObjectArry: [] };
            var filterobject = new Object();

            var specificreportFilterObjectList = [];
            var specificreportFilterObject = { code: "", name: "", isFilterApplied: false, reportFilterObjectArry: [] };
            var specificfilterobject = new Object();

            if (IsGetLastSaved) {
                if (lastcustomreportFilterObjectList.length > 0) {
                    for (var i = 0; i <= lastcustomreportFilterObjectList.length - 1; i++) {
                        if (lastcustomreportFilterObjectList[i].id == id) {
                            resultjson = { issuccess: true, customfilterjson: lastcustomreportFilterObjectList[i].customfilterjson };
                            return resultjson;
                        }
                    }
                }
            }

            if ($('#txtdate').val() != "" && $('#txtenddate').val() != "") {
                SetCustomFilterValue(customreportFilterObjectList, reportFilterObject, filterobject, "and", $('#txtdate').val(), KendoGridFilterType.isequalorgreather, KendoFilterTypes.Date, SRVTypes.Date, false, 0, "Created_On_Date", "Created_On_Date", false);
                SetCustomFilterValue(customreportFilterObjectList, reportFilterObject, filterobject, "and", $('#txtenddate').val(), KendoGridFilterType.isequalorless, KendoFilterTypes.Date, SRVTypes.Date, false, 0, "Created_On_Date", "Created_On_Date", true);

                onSpecificFilter(id, specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, "and", $('#txtdate').val()
                    , KendoGridFilterType.isequalorgreather, KendoFilterTypes.Date, SRVTypes.Date, false, 0, "Created_On_Date", "Created_On_Date", false);
                onSpecificFilter(id, specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, "and", $('#txtenddate').val()
                    , KendoGridFilterType.isequalorless, KendoFilterTypes.Date, SRVTypes.Date, false, 0, "Created_On_Date", "Created_On_Date", true);
            }

            if ($('#txtOrigHub').val() != "") {
                SetCustomFilterValue(customreportFilterObjectList, reportFilterObject, filterobject, "and", $('#txtOrigHub').val(), KendoGridFilterType.inlistfilter, KendoFilterTypes.String, SRVTypes.UpperString, false, 0, "OrigHub", "OrigHub", false);
            }

            if (specificreportFilterObjectList.length > 0) {
                for (var i = 0; i < specificreportFilterObjectList.length; i++) {
                    customreportFilterObjectList.push(specificreportFilterObjectList[i]);
                }
            }

            if (lastcustomreportFilterObjectList.length > 0) {
                for (var i = 0; i <= lastcustomreportFilterObjectList.length - 1; i++) {
                    if (lastcustomreportFilterObjectList[i].id == id) {
                        resultjson = { issuccess: true, customfilterjson: lastcustomreportFilterObjectList[i].customfilterjson };
                        break;
                    }
                }
            }

            var isexistscustomfilterjson = false;
            if (lastcustomreportFilterObjectList.length > 0) {
                for (var i = 0; i <= lastcustomreportFilterObjectList.length - 1; i++) {
                    if (lastcustomreportFilterObjectList[i].id == id) {
                        var lastcustomreportFilterObject = new Object();
                        lastcustomreportFilterObject.id = id;
                        lastcustomreportFilterObject.customfilterjson = customreportFilterObjectList;
                        lastcustomreportFilterObjectList[i] = lastcustomreportFilterObject;
                        isexistscustomfilterjson = true;
                        break;
                    }
                }
            }
            if (isexistscustomfilterjson == false) {
                var lastcustomreportFilterObject = new Object();
                lastcustomreportFilterObject.id = id;
                lastcustomreportFilterObject.customfilterjson = customreportFilterObjectList;
                lastcustomreportFilterObjectList.push(lastcustomreportFilterObject);
            }

            resultjson = { issuccess: true, customfilterjson: customreportFilterObjectList };

            return resultjson;
        }

        function onSpecificFilter(id, specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, logic, value, filtertype, fieldtype, srvfieldtype, islist, listtype, code, name, isprevioussamecode, isgridfilter = false) {
            if (code == 'Created_On_Date' && isgridfilter == false) {
                var dateObject = new Date(value)
                dateObject.setDate(dateObject.getDate() + (isprevioussamecode == false ? -1 : 1));
                var newvalue = formatDateToDateTime(dateObject, false);
                SetCustomFilterValue(specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, logic, newvalue, filtertype, fieldtype, srvfieldtype, islist, listtype, "UTC_Created_On_Date", "UTC_Created_On_Date", isprevioussamecode);
            }
            else if (code == 'Created_On_Date' && isgridfilter == true) {
                var dateObject = new Date(value)
                dateObject.setDate(dateObject.getDate() - 1);
                var newvalue = formatDateToDateTime(dateObject, false);
                SetCustomFilterValue(specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, logic, newvalue, KendoGridFilterType.isequalorgreather, fieldtype, srvfieldtype, islist, listtype, "UTC_Created_On_Date", "UTC_Created_On_Date", isprevioussamecode);

                dateObject = new Date(value)
                dateObject.setDate(dateObject.getDate() + 1);
                newvalue = formatDateToDateTime(dateObject, false);
                SetCustomFilterValue(specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, logic, newvalue, KendoGridFilterType.isequalorless, fieldtype, srvfieldtype, islist, listtype, "UTC_Created_On_Date", "UTC_Created_On_Date", true);
            }
        }

        function onReset() {
            $("#PageLoader").show();
            $('#txtdate').val($("#originalstartdate").val());
            $('#txtOrigHub').html($("#hublist").html());
            $('#txtClientID').html($("#clientlist").html())
            $("#PageLoader").hide();
            onCustomFilterValidate('grid', false, true)
        }

    </script>

    <script type="text/x-kendo-template" id="detail-template">
        <p>No Detail Available</p>
    </script>
}