@{
    ViewBag.Title = "Rights Setup";
    Layout = "~/Views/Shared/_Masterpage.cshtml";
    ViewBag.IsLoadKendo = true;
}

<link rel="stylesheet" type="text/css" href="~/css/select2.min.css?ID=@ViewBag.GUID">
<link href="https://cdnjs.cloudflare.com/ajax/libs/ionicons/2.0.1/css/ionicons.css" rel="stylesheet" type="text/css" />

<style>
    body.modal-open {
        overflow: hidden !important;
    }

    .select2-container {
        width: 100% !important;
    }

    .node {
        font-family: system-ui, sans-serif;
        font-size: inherit;
        font-weight: bold;
        line-height: 1.1;
        width: 20px;
        height: 20px;
        color: #fff;
        background-color: #5F93E7;
        border: 0.15em solid #fff;
        border-radius: 0.15em;
    }

    .half-check:checked {
        appearance: none;
        font: inherit;
        transform: translateY(-0.075em);
    }

        .half-check:checked::before {
            content: "";
            width: 15px;
            height: 15px;
            transform: scale(0);
            transition: 120ms transform ease-in-out;
            box-shadow: inset 2em 2em #fff;
        }

    .btncopy {
        border-radius: 50%;
        font-size: 12px;
        padding: 5px;
        background: #fff;
        color: #111;
        margin-left: 5px;
    }

        .btncopy.checked {
            background-color: #DA0C81 !important; /* Change this to your desired background color */
            color: white !important; /* Adjust text color if needed */
        }

    .lblradioCompare {
        display: none;
    }

    .tabs-container #tab3:checked ~ #content3,
    .tabs-container #tab2:checked ~ #content2,
    .tabs-container #tab1:checked ~ #content1 {
        display: block;
    }

    .import-export-icon{
        width:10%;
        height:100px;
        object-fit:cover;
    }
</style>

<!--Wrapper Start -->
<div class="container-fluid pt-4 pb-4 ps-1 pe-1 bg-white rounded">

    <div class="logo text-center border-bottom">
        <h3 class="box-title mb-3">Rights Setup</h3>
    </div>

    <div class="row tabs-container">
        <div class="col-lg-12 col-md-12 col-sm-12 tab-content">

            @if (ViewBag.RightsListObj.IsView)
            {
                <input id="tab1" type="radio" name="tabs" checked>
                <label for="tab1" class="tabs-label"><i>PR</i>Pages Rights</label>
                <input id="tab2" type="radio" name="tabs">
                <label for="tab2" class="tabs-label"><i>RPRM</i>Role Page Rights Mapping</label>
                <input id="tab3" type="radio" name="tabs">
                <label for="tab3" class="tabs-label"><i>URM</i>User Role Mapping</label>
            }
            @Html.Hidden("RRoleList", (object)ViewBag.RRoleList)
            @Html.Hidden("PageList", (object)ViewBag.PageList)
            @Html.Hidden("PageRightList", (object)ViewBag.PageRightList)
            @Html.Hidden("RightsList", (object)ViewBag.RightsList)

            <!-- Page Rights Grid Add / Edit Start -->
            <section id="content1">
                <div class="row">
                    <div class="col-lg-12" style="font-size:0.75em" id="tablerecord">
                        <div class="w-100 text-right">
                            <div class="button-group">
                                <button type="button" class="btn btn-lg px-4 fs-4 font-weight-medium Theme-button" style="display: none" id="pagerightsmodalbutton" onclick="GetAddEditPageRightsModal(0);">+ Add New Page Rights</button>
                            </div>
                        </div>
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <div class="panel box box-info">
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="col-md-12 col-sm-12 col-xs-12">
                                            <div id="grid"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            <!-- Page Rights Grid Add / Edit End -->
            <!-- Role Page Rights Mapping Grid Add / Edit Start -->
            <section id="content2">
                <div class="row">
                    <div class="col-lg-12" style="font-size:0.75em" id="tablerecord">
                        <div class="w-100 text-right">
                            <div class="button-group">
                                
                                <input id="import-file" type="file" class="d-none" onchange="Import_RolePageRights_Data(event)" />
                                <a href="javascript:void(0)" id="btn-Import" class="btn btn-lg px-4 fs-4 font-weight-medium Theme-button" onclick="Button_Click_File_Upload_Trigger('import-file');">Import</a>
                                
                                <a href="javascript:void(0)" id="btn-export" class="btn btn-lg px-4 fs-4 font-weight-medium Theme-button" onclick="Export_RolePageRights_Data();">Export</a>
                                
                                <button type="button" class="btn btn-lg px-4 fs-4 font-weight-medium Theme-button" style="display: none" id="rolepagerightsmodalbutton" onclick="GetAddEditRolePageRightsModal(0);">+ Add New Role Page Rights Mapping</button>
                            </div>
                        </div>
                        <div class="modal fade ModalDark" id="Role-Page-Rights-Tree-View-modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                            <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable" style="max-width:94% !important;">
                                <div class="modal-content" style="z-index:10001">
                                    <div class="modal-header">
                                        <h5 class="modal-title text-center" id="modal-Sorting-title">Role Page Rights</h5>
                                        <button type="button" class="btn-close Theme-button" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body treeContainer">
                                        <div class="row justify-content-between" style="min-width:2000px;">
                                            <div class="col-5">
                                                <select class="select2 form-select-sm form-control custom-validation is-invalid w-100" id="modalSelectRolePageRightMap" onfocus="validate(this)" onkeydown="validate(this)" onchange="GetAddEditRolePageRightsModal(this.value)" autocomplete="off"></select>
                                            </div>
                                            <div class="col-2">
                                                <select class="select2 form-select-sm form-control w-50" id="modalSelectApplication" autocomplete="off" onchange="ChangeTreeData_RolePageRights(this.value);"></select>
                                            </div>
                                            <div class="col-5">
                                                <select class="select2 form-select-sm form-control custom-validation is-invalid w-100" id="modalSelectRolePageRightMapCompare" onfocus="validate(this)" onkeydown="validate(this)" onchange="GetAddEditRolePageRightsModalCompare(this.value)" autocomplete="off"></select>
                                            </div>
                                            <div class="col-6">
                                                <nav id="role-page-rights-tree-nav" class="tree-nav"></nav>
                                            </div>
                                            <div class="col-6">
                                                <nav id="role-page-rights-tree-nav-compare" class="tree-nav"></nav>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <a id="btnRolePageRightsSaveChanges" class="btn btn-info" data-bs-dismiss="modal">Save Changes</a>
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <div class="panel box box-info">
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="col-md-12 col-sm-12 col-xs-12">
                                            <div id="grid1"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            <!-- Role Page Rights Mapping Grid Add / Edit End -->
            <!-- User Role Maping Grid Add / Edit Start -->
            <section id="content3">
                <div class="row">
                    <div class="col-lg-12" style="font-size:0.75em" id="tablerecord">
                        <div class="w-100 text-right">
                            <div class="button-group">
                                <button type="button" class="btn btn-lg px-4 fs-4 font-weight-medium Theme-button" style="display: none" id="userrolemappingmodalbutton" onclick="GetAddEditUserRoleMappingModal1('');">+ Add New User Role Mapping</button>
                            </div>
                        </div>
                        <div class="modal fade ModalDark" id="User-Role-Rights-Tree-View-modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                            <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable" style="max-width:94% !important;">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title text-center" id="modal-Sorting-title">User Role Page Rights</h5>
                                        <button type="button" class="btn-close Theme-button" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body treeContainer">
                                        <div class="row justify-content-between" style="min-width:2000px;">
                                            <div class="col-5">
                                                <input type="text" id="txtUserName" class="form-control"/>
                                                @* <select class="select2 form-select-sm form-control custom-validation is-invalid w-100" id="modalSelectUserRoleRightMap" onfocus="validate(this)" onkeydown="validate(this)" onchange="GetAddEditUserRoleMappingModal(this.value)" autocomplete="off"></select> *@
                                            </div>
                                            <div class="col-2">
                                                <select class="select2 form-select-sm form-control w-50" id="modalUserSelectApplication" autocomplete="off" onchange="ChangeTreeData_UserRolePageRights(this.value);"></select>
                                            </div>
                                            <div class="col-5">
                                                <select class="select2 form-select-sm form-control custom-validation is-invalid w-100" id="modalSelectUserRoleRightMapCompare" onfocus="validate(this)" onkeydown="validate(this)" onchange="GetAddEditUserRoleMappingModalCompare(this.value)" autocomplete="off"></select>
                                            </div>
                                            <div class="col-6">
                                                <nav id="user-role-rights-tree-nav" class="tree-nav"></nav>
                                            </div>
                                            <div class="col-6">
                                                <nav id="user-role-rights-tree-nav-compare" class="tree-nav"></nav>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <a id="btnUserRoleRightsSaveChanges" class="btn btn-info" data-bs-dismiss="modal">Save Changes</a>
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <div class="panel box box-info">
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="col-md-12 col-sm-12 col-xs-12">
                                            <div id="grid2"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            <!-- User Role Maping Grid Add / Edit End -->

        </div>
    </div>

</div>
<!--Wrapper End -->

<div class="modal fade ModalDark" id="Confirm_Syncing_Modal" tabindex="-1" aria-labelledby="Confirm_Syncing_Label" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header text-center">
                <h6 class="modal-title" id="exampleModalPopoversLabel">Need To Confirm Active Rights OR In-Active Rights For Syncing</h6>
                <button type="button" class="btn-close Theme-button" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-12">
                        <div class="animated_checkbox">
                            <label>
                                Active Rights Syncing
                                <input id="chkActiveRights" runat="server" type="checkbox" checked>
                                <span class="check"></span>
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary btnSyncPageRights">Sync</button>
            </div>
        </div>
    </div>
</div>

<script src="~/js/GridFilter2.js?ID=@ViewBag.GUID"></script>
<script src="~/js/select2.js?ID=@ViewBag.GUID" type="text/javascript"></script>
<script src="~/js/custom-Validation.js?ID=@ViewBag.GUID"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.16.2/xlsx.full.min.js"></script>

@section scripts {
    <script>
        var RRoleList = JSON.parse($("#RRoleList").val());
        var PageList = JSON.parse($("#PageList").val());
        var PageRightList = JSON.parse($("#PageRightList").val());
        var RightsList = JSON.parse($("#RightsList").val());
        var requiredFields;

        KendoDateInitial();
        Select2Initial();
        SetPageRights();
        //Load Grids
        if (RightsList.IsView) {
            PageRightsGridLoad();
            $("#tab1").change(function () {
                if ($(this).is(":checked")) {

                    if ($("#grid").data("kendoGrid")) {
                        return;
                    }
                    PageRightsGridLoad();
                }
            });
            $("#tab2").change(function () {
                if ($(this).is(":checked")) {

                    if ($("#grid1").data("kendoGrid")) {
                        return;
                    }
                    RolePageRightsMappingGridLoad();
                }
            });
            $("#tab3").change(function () {
                if ($(this).is(":checked")) {

                    if ($("#grid2").data("kendoGrid")) {
                        return;
                    }
                    UserRoleMappingGridLoad();
                }
            });
        }

        function SetPageRights() {
            if (RightsList.IsAdd) {
                $('#pagerightsmodalbutton').show();
                $('#rolepagerightsmodalbutton').show();
                $('#userrolemappingmodaltreebutton').show();
                $('#userrolemappingmodalbutton').show();
            }
        }

        //Page Rights - Add/Edit/Model/Remove
        function PageRightsGridLoad() {
            var kendogridid = 'grid';
            var pagesize = 30;
            $("#PageLoader").show();
            $("#" + kendogridid).empty();
            var PageMapfieldstype = {
                rowno: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                PR_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                P_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                PageName: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                PR_CODE: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                PageRightName: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                PageRightType_MTV_CODE: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                Sort_: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                IsHide: { type: KendoFilterTypes.Boolean, srtype: SRVTypes.Boolean },
                IsActive: { type: KendoFilterTypes.Boolean, srtype: SRVTypes.Boolean },
            }
            var _griddatasource = GetGridDataSourceAjaxCommon(kendogridid, pagesize, "/Security/GetFilterData_PageRights_List", true, true, true, PageMapfieldstype, false, false);
            $("#" + kendogridid).kendoGrid({
                dataSource: _griddatasource,
                responsive: false,
                pageable: {
                    alwaysVisible: true,
                    refresh: true,
                    pageSizes: [30, 50, 100, 500, 1000, 5000],
                    messages: {
                        display: "{0} - {1} of {2} items &nbsp;&nbsp;|&nbsp;&nbsp; Export:&nbsp;<img id='" + kendogridid + "_exportExcel' title='Click here to export to excel file' src='/icon/excel_icon.jpg' style='width:23px; height:23px; cursor:pointer' onclick='onClickExportExcel(this)' /> ",
                        empty: "No data found",
                    }
                },
                controllername: "Report", //custom fields for ExportToExcel function
                controllermethodname: "ExportInExcel_PageMapDetail", //custom fields for ExportToExcel function
                //recordsLimit: 10000,
                sortable: true,
                resizable: false,
                reorderable: false,
                noRecords: true,
                filterable: {
                    extra: true,
                    //operators: KendoOperatorListOfString,
                },
                customfixheader: false, //custom fields for onKendoDataBound function
                pageloaderid: "PageLoader", //custom fields for onKendoDataBound function
                dataBound: onKendoDataBound,
                dataBinding: function (e) {
                    $("#PageLoader").hide();
                },
                columns: [
                    {
                        field: "rowno",
                        title: "#",
                        width: 100,
                        filterable: false,
                        sortable: false,
                    },
                    {
                        field: "P_ID",
                        title: "Page ID",
                        width: 120,
                        filterable: { extra: false, operators: { string: { contains: "equals" } } }
                    },
                    {
                        field: "P_ID",
                        title: "Page Name",
                        originalfield: "PageName",
                        width: 220,
                        template: function (dataItem) {
                            return dataItem.PageName;
                        },
                        filterable: { multi: true, extra: false, search: true, checkAll: false },
                        values: PageList,
                    },
                    {
                        field: "PR_ID",
                        title: "Page Right ID",
                        width: 180,
                        filterable: { extra: false, operators: { string: { contains: "equals" } } }
                    },
                    {
                        field: "PR_CODE",
                        title: "Page Right CODE",
                        width: 230,
                        filterable: { extra: false, operators: { string: { contains: "contains" } } }
                    },
                    {
                        field: "PR_ID",
                        title: "Page Right Name",
                        originalfield: "PageRightName",
                        width: 230,
                        template: function (dataItem) {
                            return dataItem.PageRightName;
                        },
                        filterable: { multi: true, extra: false, search: true, checkAll: false },
                        values: PageRightList,
                    },
                    {
                        field: "PageRightType_MTV_CODE",
                        title: "Page Right Type",
                        width: 230,
                        filterable: { extra: false, operators: { string: { contains: "contains" } } }
                    },
                    {
                        field: "Sort_",
                        title: "Sort_",
                        width: 170,
                        filterable: { extra: false, operators: { string: { contains: "equals" } } }
                    },
                    {
                        field: "IsHide",
                        title: "IsHide",
                        width: 140,
                    },
                    {
                        field: "IsActive",
                        title: "IsActive",
                        width: 120,
                        template: function (dataItem) {
                            if (RightsList.IsDelete) {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png" alt="Active" class="cursor-pointer" onclick="Page_Rights_Remove(this,' + dataItem.PR_ID + ',' + dataItem.IsActive + ');"/>';
                                } else {
                                    return '<img src="../icon/cross.png" alt="Inactive" class="cursor-pointer" onclick="Page_Rights_Remove(this,' + dataItem.PR_ID + ',' + dataItem.IsActive + ');"/>';
                                }
                            }
                            else {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png" alt="Active"/>';
                                } else {
                                    return '<img src="../icon/cross.png" alt="Inactive"/>';
                                }
                            }
                        },
                        attributes: {
                            style: "text-align: center;"
                        }
                    },
                    {
                        title: "Action",
                        width: 100,
                        filterable: false,
                        template: function (dataItem) {
                            var actionfield = ''
                            if (RightsList.IsEdit) {
                                actionfield = '<a><i class="fa fa-edit Theme-icon fa-1x ms-1 cursor-pointer" onclick="GetAddEditPageRightsModal(' + dataItem.PR_ID + ');"></i></a>';
                            }
                            return actionfield;
                        }
                    },
                ],
                detailInit: function (e) {
                    $("#PageLoader").hide();
                }
            });
        }
        function GetAddEditPageRightsModal(PR_ID) {
            if ((PR_ID == 0 && RightsList.IsAdd == true) || (PR_ID > 0 && RightsList.IsEdit == true)) {
                GetAddEditModalAjaxCommon(PR_ID, "/Security/GetAddEditPageRightsModal");
            } else {
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }
        function AddOrEditPageRights() {
            var ObjJson = new Object();
            ObjJson.PR_ID = $("#modalPageRightId").val();
            ObjJson.P_ID = $("#modalSelectPageName option:selected").val();
            ObjJson.PR_CODE = $("#modalPageRightCode").val();
            ObjJson.PageRightName = $("#modalPageRightName").val();
            ObjJson.PageRightType = $("#modalPageRightType option:selected").val();
            ObjJson.IsHide = $("#modalprishide").is(":checked");
            ObjJson.Active = $("#modalprisactive").is(":checked");
            var JsonData = JSON.stringify(ObjJson);
            requiredFields = ['P_ID', 'PR_CODE', 'PageRightName', 'PageRightType'];
            if (!validateRequiredFields(ObjJson, requiredFields)) {
                return;
            }
            AddEditRemoveAjaxCommon(JsonData, "/Security/AddOrEdit_PageRights", null, false, 'grid');
        }
        function Page_Rights_Remove(this_, PR_ID, IsActive) {
            if (RightsList.IsDelete) {
                if ($(this_).attr("disabled") == "disabled") {
                    return;
                }
                $(this_).attr("disabled", "disabled");
                IsActiveEditCommon(PR_ID, "/Security/Remove_PageRights", null, PR_ID, IsActive, "Page Right ID", 'grid');
            } else {
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }

        //Role Page Rights Mapping - Add/Edit/Model/Remove
        function RolePageRightsMappingGridLoad() {
            var kendogridid = 'grid1';
            var pagesize = 30;
            $("#PageLoader").show();
            $("#" + kendogridid).empty();
            var RolePageMapfieldstype = {
                rowno: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                RPRM_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                R_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                PR_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                RoleName: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                PageRightName: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                IsRightActive: { type: KendoFilterTypes.Boolean, srtype: SRVTypes.Boolean },
                IsActive: { type: KendoFilterTypes.Boolean, srtype: SRVTypes.Boolean },
            }
            var _griddatasource1 = GetGridDataSourceAjaxCommon(kendogridid, pagesize, "/Security/GetFilterData_RolePageRights_List", true, true, true, RolePageMapfieldstype, false, false);
            $("#" + kendogridid).kendoGrid({
                dataSource: _griddatasource1,
                responsive: false,
                pageable: {
                    alwaysVisible: true,
                    refresh: true,
                    pageSizes: [30, 50, 100, 500, 1000, 5000],
                    messages: {
                        display: "{0} - {1} of {2} items &nbsp;&nbsp;|&nbsp;&nbsp; Export:&nbsp;<img id='" + kendogridid + "_exportExcel' title='Click here to export to excel file' src='/icon/excel_icon.jpg' style='width:23px; height:23px; cursor:pointer' onclick='onClickExportExcel(this)' /> ",
                        empty: "No data found",
                    }
                },
                controllername: "Report", //custom fields for ExportToExcel function
                controllermethodname: "ExportInExcel_RolePageMapDetail", //custom fields for ExportToExcel function
                //recordsLimit: 10000,
                sortable: true,
                resizable: false,
                reorderable: false,
                noRecords: true,
                filterable: {
                    extra: true,
                    //operators: KendoOperatorListOfString,
                },
                customfixheader: false, //custom fields for onKendoDataBound function
                pageloaderid: "PageLoader", //custom fields for onKendoDataBound function
                dataBound: onKendoDataBound,
                dataBinding: function (e) {
                    $("#PageLoader").hide();
                },
                columns: [
                    {
                        field: "rowno",
                        title: "#",
                        width: 100,
                        filterable: false,
                        sortable: false,
                    },
                    {
                        field: "RPRM_ID",
                        title: "RPRM_ID",
                        width: 100,
                        hidden: true,
                    },
                    {
                        field: "R_ID",
                        title: "Role ID",
                        width: 120,
                        // hidden: true,
                        filterable: { extra: false, operators: { string: { contains: "equals" } } }
                    },
                    {
                        field: "R_ID",
                        originalfield: "RoleName",
                        title: "Role Name",
                        width: 200,
                        template: function (dataItem) {
                            return dataItem.RoleName;
                        },
                        filterable: { multi: true, extra: false, search: true, checkAll: false },
                        values: RRoleList,
                    },
                    {
                        field: "PR_ID",
                        title: "Page Right ID",
                        width: 200,
                        filterable: { extra: false, operators: { string: { contains: "equals" } } }
                    },
                    {
                        field: "PR_ID",
                        title: "Page Right Name",
                        originalfield: "PageRightName",
                        width: 220,
                        template: function (dataItem) {
                            return dataItem.PageRightName;
                        },
                        filterable: { multi: true, extra: false, search: true, checkAll: false },
                        values: PageRightList,
                    },
                    {
                        field: "IsRightActive",
                        title: "IsRight Active",
                        width: 180,
                        filterable: { extra: false, operators: { string: { contains: "equals" } } }
                    },
                    {
                        field: "IsActive",
                        title: "IsActive",
                        width: 130,
                        template: function (dataItem) {
                            if (RightsList.IsDelete) {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png" alt="Active" class="cursor-pointer" onclick="Role_Page_Rights_Remove(this,' + dataItem.RPRM_ID + ',' + dataItem.IsActive + ');"/>';
                                } else {
                                    return '<img src="../icon/cross.png" alt="Inactive" class="cursor-pointer" onclick="Role_Page_Rights_Remove(this,' + dataItem.RPRM_ID + ',' + dataItem.IsActive + ');"/>';
                                }
                            }
                            else {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png"/>';
                                } else {
                                    return '<img src="../icon/cross.png"/>';
                                }
                            }
                        },
                        attributes: {
                            style: "text-align: center;"
                        }
                    },
                ],
                detailInit: function (e) {
                    $("#PageLoader").hide();
                }
            });
        }
        function GetAddEditRolePageRightsModal(RoleID) {
            if (RoleID > 0) {
                GetTreeViewAjaxCommon(RoleID, "/Security/GetAddEditRolePageRightsModal", GenrateHtmlRolePageRights, "AddOrEditRolePageRights(" + RoleID + ")", "role-page-rights-tree-nav", "btnRolePageRightsSaveChanges");
                GetDropDownListCommonAjax(null, "/Security/Get_Roles_Dropdown", "modalSelectRolePageRightMapCompare");
            }
            else {
                GetDropDownListCommonAjax(null, "/Security/Get_Application_Dropdown", "modalSelectApplication");
                GetDropDownListCommonAjax(null, "/Security/Get_Roles_Dropdown", "modalSelectRolePageRightMap");
                $("#modalSelectRolePageRightMapCompare").empty();
                $("#role-page-rights-tree-nav").empty();
                $("#role-page-rights-tree-nav-compare").empty();
                $('#Role-Page-Rights-Tree-View-modal').modal({
                    backdrop: false
                });
                $('#Role-Page-Rights-Tree-View-modal').modal('show');
            }
        }
        function GetAddEditRolePageRightsModalCompare(RoleID) {
            $("#role-page-rights-tree-nav-compare").empty();
            if (RoleID > 0) {
                GetTreeViewAjaxCommon(RoleID, "/Security/GetAddEditRolePageRightsModal", GenrateHtmlRolePageRights, "", "role-page-rights-tree-nav-compare", "", true);
            }
            else {
                GetDropDownListCommonAjax(null, "/Security/Get_Roles_Dropdown", "modalSelectRolePageRightMapCompare");
            }
        }
        function GenrateHtmlRolePageRights(result, isCompare) {
            var html = "";
            var radioCount = 0;
            if (result != null) {
                var compareCopy = "";
                var compare = "";
                if (isCompare) {
                    compare = "disabled";
                    radioCount += 1;
                    compareCopy = "<label for='btncopy-" + radioCount + "' class='fa fa-copy btncopy' onclick='SyncRolePageRightsTree();'><input type='radio' id='btncopy-" + radioCount + "' class='lblradioCompare' name='compare-radio-group'></label>";
                }
                var attr = "";
                if (result.IsAllChecked)
                    attr = "checked";


                html += "<details class='tree-nav__item is-expandable' open>";
                html += "<summary class='tree-nav__item-title'><input type='checkbox' class='IsRoleDisabled node' " + attr + " style='margin-right: 6px;' " + compare + ">" + result.RoleName + "<span class='R_ID d-none'>" + result.R_ID + "</span>" + compareCopy + "</summary>";
                if (result.pageGroupInfo != null) {
                    result.pageGroupInfo.forEach(function (pg) {
                        if (pg.IsChildExists) {
                            attr = "";
                            if (pg.IsAllChecked)
                                attr = "checked";

                            if (isCompare) {
                                radioCount += 1;
                                compareCopy = "<label for='btncopy-" + radioCount + "' class='fa fa-copy btncopy' onclick='SyncRolePageRightsTree();'><input type='radio' id='btncopy-" + radioCount + "' class='lblradioCompare' name='compare-radio-group'></label>";
                            }

                            html += "<details class='tree-nav__item is-expandable' open>";
                            html += "<summary class='tree-nav__item-title'><input type='checkbox' class='node' " + attr + " style='margin-right: 6px;' " + compare + ">" + pg.PageGroupName + "<span class='PG_ID d-none'>" + pg.PG_ID + "</span>" + compareCopy + "</summary>";
                            if (pg.pageInfo != null) {
                                pg.pageInfo.forEach(function (p) {
                                    if (p.IsChildExists) {
                                        attr = "";
                                        if (p.IsAllChecked)
                                            attr = "checked";

                                        if (isCompare) {
                                            radioCount += 1;
                                            compareCopy = "<label for='btncopy-" + radioCount + "' class='fa fa-copy btncopy' onclick='SyncRolePageRightsTree();'><input type='radio' id='btncopy-" + radioCount + "' class='lblradioCompare' name='compare-radio-group'></label>";
                                        }

                                        html += "<details class='tree-nav__item is-expandable p" + p.PageAppCode + "' open>";
                                        html += "<summary class='tree-nav__item-title'><input type='checkbox' class='node' " + attr + " style='margin-right: 6px;' " + compare + ">" + p.PageName + "<span class='P_ID d-none'>" + p.P_ID + "</span>" + compareCopy + "</summary>";
                                        html += "<div class='tree-nav__item'>";

                                        if (p.pageRightsInfo != null) {
                                            p.pageRightsInfo.forEach(function (pr) {
                                                attr = "";
                                                if (pr.IsRightActive)
                                                    attr = "checked";

                                                html += "<a class='tree-nav__item-title' style='color: #2cd07e;'><input id='" + pr.PageRightName.trim() + "' type='checkbox' class='node singlecheck' " + attr + " style='margin-right: 6px;' " + compare + "><label for= '" + pr.PageRightName.trim() + "'>" + pr.PageRightName + "</label><span class='PR_ID d-none'>" + pr.PR_ID + "</span></a>";
                                            });
                                        }

                                        html += "</div>";
                                        html += "</details>";
                                    }
                                });
                            }

                            html += "</details>";
                        }
                    });
                }

                html += "</details>";
                html += "</nav>";
            }
            return html;
        }
        function AddOrEditRolePageRights(RoleID) {
            const result = {};
            $('#role-page-rights-tree-nav .tree-nav__item-title input.node.singlecheck:checked').each(function () {
                const PR_ID = $(this).closest('.tree-nav__item-title').find('.PR_ID').text();
                const P_ID = $(this).parent().parent().parent().find('.P_ID').text();
                const PG_ID = $(this).parent().parent().parent().parent().find('.PG_ID').text()
                const R_ID = $(this).parent().parent().parent().parent().parent().find('.R_ID').text()

                // Check if the R_ID doesn't exist in the result object, then initialize it
                if (!result[R_ID]) {
                    result[R_ID] = {
                        R_ID: R_ID,
                        PageGroupInfo: []
                    };
                }

                // Search for the PG_ID within the R_ID group, if not found, initialize it
                let foundPG = result[R_ID].PageGroupInfo.find(item => item.PG_ID === PG_ID);
                if (!foundPG) {
                    foundPG = {
                        PG_ID: PG_ID,
                        PageInfo: []
                    };
                    result[R_ID].PageGroupInfo.push(foundPG);
                }

                // Search for the P_ID within the PG_ID group, if not found, initialize it
                let foundP = foundPG.PageInfo.find(item => item.P_ID === P_ID);
                if (!foundP) {
                    foundP = {
                        P_ID: P_ID,
                        PageRightsInfo: []
                    };
                    foundPG.PageInfo.push(foundP);
                }

                // Push the PR_ID into the foundP.PR_ID array
                foundP.PageRightsInfo.push({ PR_ID: PR_ID });
            });
            var ObjJson = result[RoleID];
            var JsonData = JSON.stringify(ObjJson, null, 2);
            if (JsonData == undefined) {
                toastr.error("Data Not Found");
                return;
            }
            AddEditRemoveAjaxCommon(JsonData, "/Security/AddOrEdit_RolePageRights", null, false, 'grid1');
        }
        function SyncRolePageRightsTree() {
            const checkedRadioButton = $('input[type="radio"][name="compare-radio-group"]:checked');
            if (checkedRadioButton.length > 0) {
                var ObjJson = new Object();
                ObjJson.RoleID = $("#modalSelectRolePageRightMap option:selected").val();
                ObjJson.RoleIDCompare = $("#modalSelectRolePageRightMapCompare option:selected").val();
                var CopyR_ID = '0';
                var CopyPG_ID = '0';
                var CopyP_ID = '0';
                var classIs;
                var CopyText = "";
                const checkedId = checkedRadioButton.attr('id');
                var ParentClass = $('#' + checkedId).parent().siblings('span').attr('class');
                classIs = ParentClass.split(' ')[0];
                if (classIs === 'R_ID') {
                    CopyR_ID = $('#' + checkedId).parent().siblings('span.R_ID').text();
                    CopyText = "Copied Role";
                }
                else if (classIs === 'PG_ID') {
                    CopyPG_ID = $('#' + checkedId).parent().siblings('span.PG_ID').text();
                    CopyText = "Copied Page Group";
                }
                else {
                    CopyP_ID = $('#' + checkedId).parent().siblings('span.P_ID').text();
                    CopyText = "Copied Page";
                }
                ObjJson.CopyR_ID = CopyR_ID;
                ObjJson.CopyPG_ID = CopyPG_ID;
                ObjJson.CopyP_ID = CopyP_ID;
                ObjJson.Active = $("#chkActiveRights").prop("checked");
                if (ObjJson.RoleID === ObjJson.RoleIDCompare) {
                    toastr.error("Same Role ID Can't Sync");
                    return;
                }

                $('#Confirm_Syncing_Modal').modal({
                    backdrop: false
                });
                $('#Confirm_Syncing_Modal').modal('show');

                $('.btnSyncPageRights').off('click').on('click', function () {
                    var JsonData = JSON.stringify(ObjJson);
                    AddEditRemoveAjaxCommon(JsonData, "/Security/Sync_RolePageRights", null, false, 'grid1');
                    $('#Confirm_Syncing_Modal').modal({
                        backdrop: true
                    });
                    $('#Confirm_Syncing_Modal').modal('hide');
                    var RoleID = $("#modalSelectRolePageRightMap option:selected").val();
                    GetAddEditRolePageRightsModal(RoleID);
                });
            } else {
                //toastr.error("Must be Copy for Syncing");
            }
        }
        function Role_Page_Rights_Remove(this_, RPRM_ID, IsActive) {
            if (RightsList.IsDelete) {
                if ($(this_).attr("disabled") == "disabled") {
                    return;
                }
                $(this_).attr("disabled", "disabled");
                IsActiveEditCommon(RPRM_ID, "/Security/Remove_RolePageRights", null, RPRM_ID, IsActive, "Role Page Right Mapping ID", 'grid1');
            } else {
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }
        function ChangeTreeData_RolePageRights(_this) {
            var AppCode = "";
            if (_this !== "") {
                AppCode = "p" + _this;
                $(".IsRoleDisabled").prop("disabled", true);
            }else{
                $(".IsRoleDisabled").prop("disabled", false);
            }

            $('#role-page-rights-tree-nav .tree-nav__item-title input.node.singlecheck').each(function () {
                var detail = $(this).parent().parent().parent();
                var summary = $(this).parent().parent().parent().siblings();
                if (AppCode !== "") {
                    if (detail.hasClass(AppCode)) {
                        detail.show();
                        summary.show();
                    }
                    else {
                        detail.hide();
                        summary.hide();
                    }
                }
                else {
                    detail.show();
                    summary.show();
                }
            });

            $('#role-page-rights-tree-nav-compare .tree-nav__item-title input.node.singlecheck').each(function () {
                var detail = $(this).parent().parent().parent();
                var summary = $(this).parent().parent().parent().siblings();
                if (AppCode !== "") {
                    if (detail.hasClass(AppCode)) {
                        detail.show();
                        summary.show();
                    }
                    else {
                        detail.hide();
                        summary.hide();
                    }
                }
                else {
                    detail.show();
                    summary.show();
                }
            });
        }
        function Export_RolePageRights_Data() {
            $("#PageLoader").show();
            GetResponseAjaxCommon(null, "/Security/ExportExcel_RolePageRights", function (res) {
                const headers = ["Role ID", "Role Name", "Right ID", "Right Name", "Right Type", "Page Name", "PageGroup Name", "Application Name", "Is Right Active"];
                const data = [
                    headers,
                    ...res.map(item => [
                        item.Role_ID,
                        item.Role_Name,
                        item.Right_ID,
                        item.Right_Name,
                        item.Right_Type,
                        item.Page_Name,
                        item.PageGroup_Name,
                        item.Application_Name,
                        item.IsRightActive
                    ])
                ];
                const worksheet = XLSX.utils.aoa_to_sheet(data);

                // Set column widths to fit the header text
                const colWidths = headers.map(header => ({ wch: header.length }));
                worksheet['!cols'] = colWidths;

                const workbook = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(workbook, worksheet, "Sheet1");
                $("#PageLoader").hide();
                XLSX.writeFile(workbook, 'RolePageRights.xlsx');
            });
        }
        function Import_RolePageRights_Data(event) {
            const input = event.target;
            const file = input.files[0];

            const allowedExtensions = ['xlsx', 'xls'];
            const fileNameParts = file.name.split('.');
            const fileExtension = fileNameParts[fileNameParts.length - 1].toLowerCase();
            if (!allowedExtensions.includes(fileExtension)) {
                toastr.error('Please select only Excel (.xlsx or .xls) file.');
                return;
            }

            var ObjJson = new Object();
            ObjJson.ImportFile = file;
            requiredFields = ['ImportFile'];
            if (!validateRequiredFields(ObjJson, requiredFields)) {
                return;
            }

            AddEditRemoveAjaxCommon_File(ObjJson, "/Security/ImportExcel_RolePageRights");
        }

        //User Role Mapping - Add/Edit/Model/Remove
        function UserRoleMappingGridLoad() {
            var kendogridid = 'grid2';
            var pagesize = 30;
            $("#PageLoader").show();
            $("#" + kendogridid).empty();
            var UserRoleMapfieldstype = {
                rowno: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                URM_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                R_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                USERNAME: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                RoleName: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                IsGroupRoleID: { type: KendoFilterTypes.Boolean, srtype: SRVTypes.Boolean },
                IsActive: { type: KendoFilterTypes.Boolean, srtype: SRVTypes.Boolean },
            }
            var _griddatasource2 = GetGridDataSourceAjaxCommon(kendogridid, pagesize, "/Security/GetFilterData_UserRoleMap_List", true, true, true, UserRoleMapfieldstype, false, false);
            $("#grid2").kendoGrid({
                dataSource: _griddatasource2,
                responsive: false,
                pageable: {
                    alwaysVisible: true,
                    refresh: true,
                    pageSizes: [30, 50, 100, 500, 1000, 5000],
                    messages: {
                        display: "{0} - {1} of {2} items &nbsp;&nbsp;|&nbsp;&nbsp; Export:&nbsp;<img id='" + kendogridid + "_exportExcel' title='Click here to export to excel file' src='/icon/excel_icon.jpg' style='width:23px; height:23px; cursor:pointer' onclick='onClickExportExcel(this)' /> ",
                        empty: "No data found",
                    }
                },
                controllername: "Report", //custom fields for ExportToExcel function
                controllermethodname: "ExportInExcel_UserRoleMapDetail", //custom fields for ExportToExcel function
                //recordsLimit: 10000,
                sortable: true,
                resizable: false,
                reorderable: false,
                noRecords: true,
                filterable: {
                    extra: true,
                    //operators: KendoOperatorListOfString,
                },
                customfixheader: false, //custom fields for onKendoDataBound function
                pageloaderid: "PageLoader", //custom fields for onKendoDataBound function
                dataBound: onKendoDataBound,
                dataBinding: function (e) {
                    $("#PageLoader").hide();
                },
                columns: [
                    {
                        field: "rowno",
                        title: "#",
                        width: 100,
                        filterable: false,
                        sortable: false,
                    },
                    {
                        field: "URM_ID",
                        title: "URM_ID",
                        width: 120,
                        hidden: true,
                    },
                    {
                        field: "USERNAME",
                        title: "User Name",
                        width: 210,
                        filterable: { extra: false, operators: { string: { contains: "contains" } } }
                    },
                    {
                        field: "R_ID",
                        title: "R ID",
                        width: 160,
                        filterable: { extra: false, operators: { string: { contains: "equals" } } }
                    },
                    {
                        field: "R_ID",
                        title: "Role Name",
                        originalfield: "RoleName",
                        width: 230,
                        template: function (dataItem) {
                            return dataItem.RoleName;
                        },
                        filterable: { multi: true, extra: false, search: true, checkAll: false },
                        values: RRoleList,
                    },
                    {
                        field: "IsGroupRoleID",
                        title: "Is Group Role",
                        width: 180,
                    },
                    {
                        field: "IsActive",
                        title: "IsActive",
                        width: 130,
                        template: function (dataItem) {
                            if (RightsList.IsDelete) {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png" alt="Active" class="cursor-pointer" onclick="User_Role_Mapping_Remove(this,' + dataItem.URM_ID + ',' + dataItem.IsActive + ');"/>';
                                } else {
                                    return '<img src="../icon/cross.png" alt="Inactive" class="cursor-pointer" onclick="User_Role_Mapping_Remove(this,' + dataItem.URM_ID + ',' + dataItem.IsActive + ');"/>';
                                }
                            }
                            else {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png"/>';
                                } else {
                                    return '<img src="../icon/cross.png"/>';
                                }
                            }
                        },
                        attributes: {
                            style: "text-align: center;"
                        }
                    },
                    {
                        title: "Action",
                        width: 100,
                        filterable: false,
                        template: function (dataItem) {
                            var actionfield = ''
                            if (RightsList.IsEdit) {
                                actionfield = '<a><i class="fa fa-edit Theme-icon fa-1x ms-1 cursor-pointer" onclick="GetAddEditUserRoleMappingModal1(' + "'" + dataItem.Ery_URM_ID + "'" + ');" > </i></a >';
                                actionfield += '<a><i class="fa fa-tree Theme-icon fa-1x ms-1 cursor-pointer" onclick="GetAddEditUserRoleMappingModal(' + "'" + dataItem.USERNAME + "'" + ');" > </i></a >';
                            }
                            return actionfield;
                        }
                    },
                ],
                detailInit: function (e) {
                    $("#PageLoader").hide();
                }
            });
        }
        function GetAddEditUserRoleMappingModal(UserName) {
            if (UserName !== '') {
                $("#txtUserName").val(UserName);
                GetTreeViewAjaxCommon(UserName, "/Security/GetAddEditUserRoleMappingModal", GenrateHtmlUserRolePageRights, "AddOrEditUserRoleMapping('" + UserName + "')", "user-role-rights-tree-nav", "btnUserRoleRightsSaveChanges");
                GetDropDownListCommonAjax(null, "/Security/Get_Users_Dropdown", "modalSelectUserRoleRightMapCompare");
                GetDropDownListCommonAjax(null, "/Security/Get_Application_Dropdown", "modalUserSelectApplication");
                
                $("#user-role-rights-tree-nav").empty();
                $("#user-role-rights-tree-nav-compare").empty();
                $('#User-Role-Rights-Tree-View-modal').modal({
                    backdrop: false
                });
                $('#User-Role-Rights-Tree-View-modal').modal('show');
            }
            else {
                GetDropDownListCommonAjax(null, "/Security/Get_Users_Dropdown", "modalSelectUserRoleRightMap");
                $("#user-role-rights-tree-nav").empty();
                $("#user-role-rights-tree-nav-compare").empty();
                $('#User-Role-Rights-Tree-View-modal').modal({
                    backdrop: false
                });
                $('#User-Role-Rights-Tree-View-modal').modal('show');
            }
        }
        function GetAddEditUserRoleMappingModalCompare(UserName) {
            $("#role-page-rights-tree-nav-compare").empty();
            if (UserName !== '') {
                GetTreeViewAjaxCommon(UserName, "/Security/GetAddEditUserRoleMappingModal", GenrateHtmlUserRolePageRights, "", "user-role-rights-tree-nav-compare", "", true);
            }
            else {
                GetDropDownListCommonAjax(null, "/Security/Get_Users_Dropdown", "modalSelectUserRoleRightMapCompare");
            }
        }
        function AddOrEditUserRoleMapping(UserName) {
            const result = {};
            $('#user-role-rights-tree-nav .tree-nav__item-title input.node.singlecheck:checked').each(function () {
                const PR_ID = $(this).closest('.tree-nav__item-title').find('.PR_ID').text();
                const P_ID = $(this).parent().parent().parent().find('.P_ID').text();
                const PG_ID = $(this).parent().parent().parent().parent().find('.PG_ID').text()
                const R_ID = $(this).parent().parent().parent().parent().parent().find('.R_ID').text()

                // Check if the R_ID doesn't exist in the result object, then initialize it
                if (!result[UserName]) {
                    result[UserName] = {
                        R_ID: R_ID,
                        UserName: UserName,
                        PageGroupInfo: []
                    };
                }

                // Search for the PG_ID within the R_ID group, if not found, initialize it
                let foundPG = result[UserName].PageGroupInfo.find(item => item.PG_ID === PG_ID);
                if (!foundPG) {
                    foundPG = {
                        PG_ID: PG_ID,
                        PageInfo: []
                    };
                    result[UserName].PageGroupInfo.push(foundPG);
                }

                // Search for the P_ID within the PG_ID group, if not found, initialize it
                let foundP = foundPG.PageInfo.find(item => item.P_ID === P_ID);
                if (!foundP) {
                    foundP = {
                        P_ID: P_ID,
                        PageRightsInfo: []
                    };
                    foundPG.PageInfo.push(foundP);
                }

                // Push the PR_ID into the foundP.PR_ID array
                foundP.PageRightsInfo.push({ PR_ID: PR_ID });
            });
            var ObjJson = result[UserName];
            var JsonData = JSON.stringify(ObjJson, null, 2);
            if (JsonData == undefined) {
                toastr.error("Data Not Found");
                return;
            }
            AddEditRemoveAjaxCommon(JsonData, "/Security/AddOrEdit_UserRoleMap", null, false, 'grid2');
        }
        function User_Role_Mapping_Remove(this_, URM_ID, IsActive) {
            if ($(this_).attr("disabled") == "disabled") {
                return;
            }
            $(this_).attr("disabled", "disabled");
            IsActiveEditCommon(URM_ID, "/Security/Remove_UserRoleMap", null, URM_ID, IsActive, "User Role Mapping ID", 'grid2');
        }
        function Load_Users_By_Role_Dropdown(R_ID) {
            GetDropDownListCommonAjax(R_ID, "/Security/Get_Users_By_Role_Dropdown", "modalurmUserName");
        }
        function ChangeTreeData_UserRolePageRights(_this) {
            var AppCode = "";
            if (_this !== "") {
                AppCode = "p" + _this; 
                $(".IsRoleDisabled").prop("disabled", true);
            } else {
                $(".IsRoleDisabled").prop("disabled", false);
            }
            $('#user-role-rights-tree-nav .tree-nav__item-title input.node.singlecheck').each(function () {
                var detail = $(this).parent().parent().parent();
                var summary = $(this).parent().parent().parent().siblings();
                if (AppCode !== "") {
                    if (detail.hasClass(AppCode)) {
                        detail.show();
                        summary.show();
                    }
                    else {
                        detail.hide();
                        summary.hide();
                    }
                }
                else {
                    detail.show();
                    summary.show();
                }
            });
            $('#user-role-rights-tree-nav-compare .tree-nav__item-title input.node.singlecheck').each(function () {
                var detail = $(this).parent().parent().parent();
                var summary = $(this).parent().parent().parent().siblings();
                if (AppCode !== "") {
                    if (detail.hasClass(AppCode)) {
                        detail.show();
                        summary.show();
                    }
                    else {
                        detail.hide();
                        summary.hide();
                    }
                }
                else {
                    detail.show();
                    summary.show();
                }
            });
        }
        function SyncUserRolePageRightsTree() {
            const checkedRadioButton = $('input[type="radio"][name="compare-radio-group"]:checked');
            if (checkedRadioButton.length > 0) {
                var ObjJson = new Object();
                ObjJson.UserName = $("#modalSelectUserRoleRightMap option:selected").val();
                ObjJson.UserNameCompare = $("#modalSelectUserRoleRightMapCompare option:selected").val();
                var CopyR_ID = '0';
                var CopyPG_ID = '0';
                var CopyP_ID = '0';
                var classIs;
                var CopyText = "";
                const checkedId = checkedRadioButton.attr('id');
                var ParentClass = $('#' + checkedId).parent().siblings('span').attr('class');
                classIs = ParentClass.split(' ')[0];
                if (classIs === 'R_ID') {
                    CopyR_ID = $('#' + checkedId).parent().siblings('span.R_ID').text();
                    CopyText = "Copied Role";
                }
                else if (classIs === 'PG_ID') {
                    CopyPG_ID = $('#' + checkedId).parent().siblings('span.PG_ID').text();
                    CopyText = "Copied Page Group";
                }
                else {
                    CopyP_ID = $('#' + checkedId).parent().siblings('span.P_ID').text();
                    CopyText = "Copied Page";
                }
                ObjJson.CopyR_ID = CopyR_ID;
                ObjJson.CopyPG_ID = CopyPG_ID;
                ObjJson.CopyP_ID = CopyP_ID;
                ObjJson.Active = $("#chkActiveRights").prop("checked");
                if (ObjJson.UserName === ObjJson.UserNameCompare) {
                    toastr.error("Same User Can't Sync");
                    return;
                }

                $('#Confirm_Syncing_Modal').modal({
                    backdrop: false
                });
                $('#Confirm_Syncing_Modal').modal('show');

                $('.btnSyncPageRights').off('click').on('click', function () {
                    var JsonData = JSON.stringify(ObjJson);
                    AddEditRemoveAjaxCommon(JsonData, "/Security/Sync_UserRolePageRights", null, false, 'grid2');
                    $('#Confirm_Syncing_Modal').modal({
                        backdrop: true
                    });
                    $('#Confirm_Syncing_Modal').modal('hide');
                    var RoleID = $("#modalSelectUserRoleRightMap option:selected").val();
                    GetAddEditUserRoleMappingModal(RoleID);
                });
            }
        }
        function GenrateHtmlUserRolePageRights(result, isCompare) {
            var html = "";
            var radioCount = 0;
            if (result != null) {
                var compareCopy = "";
                var compare = "";
                if (isCompare) {
                    compare = "disabled";
                    radioCount += 1;
                    compareCopy = "<label for='btncopy-" + radioCount + "' class='fa fa-copy btncopy' onclick='SyncUserRolePageRightsTree();'><input type='radio' id='btncopy-" + radioCount + "' class='lblradioCompare' name='compare-radio-group'></label>";
                }
                var attr = "";
                if (result.IsAllChecked)
                    attr = "checked";


                html += "<details class='tree-nav__item is-expandable' open>";
                html += "<summary class='tree-nav__item-title'><input type='checkbox' class='IsRoleDisabled node' " + attr + " style='margin-right: 6px;' " + compare + ">" + result.RoleName + "<span class='R_ID d-none'>" + result.R_ID + "</span>" + compareCopy + "</summary>";
                if (result.pageGroupInfo != null) {
                    result.pageGroupInfo.forEach(function (pg) {
                        if (pg.IsChildExists) {
                            attr = "";
                            if (pg.IsAllChecked)
                                attr = "checked";

                            if (isCompare) {
                                radioCount += 1;
                                compareCopy = "<label for='btncopy-" + radioCount + "' class='fa fa-copy btncopy' onclick='SyncUserRolePageRightsTree();'><input type='radio' id='btncopy-" + radioCount + "' class='lblradioCompare' name='compare-radio-group'></label>";
                            }

                            html += "<details class='tree-nav__item is-expandable' open>";
                            html += "<summary class='tree-nav__item-title'><input type='checkbox' class='node' " + attr + " style='margin-right: 6px;' " + compare + ">" + pg.PageGroupName + "<span class='PG_ID d-none'>" + pg.PG_ID + "</span>" + compareCopy + "</summary>";
                            if (pg.pageInfo != null) {
                                pg.pageInfo.forEach(function (p) {
                                    if (p.IsChildExists) {
                                        attr = "";
                                        if (p.IsAllChecked)
                                            attr = "checked";

                                        if (isCompare) {
                                            radioCount += 1;
                                            compareCopy = "<label for='btncopy-" + radioCount + "' class='fa fa-copy btncopy' onclick='SyncUserRolePageRightsTree();'><input type='radio' id='btncopy-" + radioCount + "' class='lblradioCompare' name='compare-radio-group'></label>";
                                        }

                                        html += "<details class='tree-nav__item is-expandable p" + p.PageAppCode + "' open>";
                                        html += "<summary class='tree-nav__item-title'><input type='checkbox' class='node' " + attr + " style='margin-right: 6px;' " + compare + ">" + p.PageName + "<span class='P_ID d-none'>" + p.P_ID + "</span>" + compareCopy + "</summary>";
                                        html += "<div class='tree-nav__item'>";

                                        if (p.pageRightsInfo != null) {
                                            p.pageRightsInfo.forEach(function (pr) {
                                                attr = "";
                                                if (pr.IsRightActive)
                                                    attr = "checked";

                                                html += "<a class='tree-nav__item-title' style='color: #2cd07e;'><input id='" + pr.PageRightName.trim() + "' type='checkbox' class='node singlecheck' " + attr + " style='margin-right: 6px;' " + compare + "><label for= '" + pr.PageRightName.trim() + "'>" + pr.PageRightName + "</label><span class='PR_ID d-none'>" + pr.PR_ID + "</span></a>";
                                            });
                                        }

                                        html += "</div>";
                                        html += "</details>";
                                    }
                                });
                            }

                            html += "</details>";
                        }
                    });
                }

                html += "</details>";
                html += "</nav>";
            }
            return html;
        }

        function Load_Users_By_GroupRole_Dropdown(isGroupRole) {
            
            GetDropDownListCommonAjax(isGroupRole, "/Security/Get_Users_By_GroupRole_Dropdown", "modalurmSelectRoleName");
            var dropdown = document.getElementById("modalurmUserName");
            var placeholderOption = dropdown.options[0]; 
            dropdown.innerHTML = '';
            dropdown.appendChild(placeholderOption);
        }

        function GetAddEditUserRoleMappingModal1(Ery_URM_ID) {
            if ((Ery_URM_ID === "" && RightsList.IsAdd == true) || (Ery_URM_ID !== "" && RightsList.IsEdit == true)) {
                GetAddEditModalAjaxCommon(Ery_URM_ID, "/Security/GetAddEditUserRoleMappingModal1", InitialDropRoles);
            }
            else {
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }
        function InitialDropRoles() {
            Select2Initial("modalurmSelectRoleName", false);
        }
        function AddOrEditUserRoleMapping1() {
            var ObjJson = new Object();
            ObjJson.URM_ID = $("#modalUserRoleMappingID").val();
            ObjJson.R_ID = $("#modalurmSelectRoleName option:selected").val();
            ObjJson.UNAME = $("#modalurmUserName").val();
            ObjJson.IsGroupRoleID = $("#modalIsGroupRoleID").is(":checked");
            ObjJson.Active = $("#modalurmisactive").is(":checked");

            var JsonData = JSON.stringify(ObjJson);
            var requiredFields = ['R_ID', 'UNAME'];

            if (!validateRequiredFields(ObjJson, requiredFields)) {
                return;
            }

            AddEditRemoveAjaxCommon(JsonData, "/Security/AddOrEdit_UserRoleMap1", null, false, 'grid2');
        }

        $(".treeContainer").on('change', 'input[type="radio"][name="compare-radio-group"]', function () {
            const isChecked = $(this).is(':checked');
            if (isChecked) {
                const treeContainer = $(this).closest('.treeContainer');
                treeContainer.find('label.btncopy').removeClass('checked');
                $(this).parent('label.btncopy').addClass('checked');
            } else {
                $(this).parent('label.btncopy').removeClass('checked');
            }
        });
        $(".treeContainer").on('change', '.node', function () {
            const isChecked = $(this).prop('checked');
            const $currentDetails = $(this).closest('details');
            const $childCheckboxes = $currentDetails.find('input[type="checkbox"]').not(this);
            const $lastSiblingCheckbox = $(this).closest('.tree-nav__item').find('input[type="checkbox"]').last();
            var $parent = $(this).closest('.tree-nav__item');
            var $parentCheckbox = $parent.prev('.tree-nav__item-title').find('input[type="checkbox"]');
            var $checkboxes = $parent.find('.node.singlecheck');
            var $checkedboxesCount = $parent.find('.node.singlecheck.checked');
            var checkedCount = $checkedboxesCount.length;

            if ($(this).hasClass('singlecheck')) {
                handleSingleCheck($(this), isChecked);
            } else {
                if ($lastSiblingCheckbox[0] === this) {
                    $(this).prop('checked', isChecked);
                }

                if ($childCheckboxes.length) {
                    $childCheckboxes.prop('checked', isChecked);
                }
            }

            $parentCheckbox.removeClass('half-check');
            if (checkedCount === 0) {
                $parentCheckbox.prop('checked', false);
            } else if (checkedCount === $checkboxes.length) {
                $parentCheckbox.prop('checked', true);
            } else {
                $parentCheckbox.addClass('half-check');
                $parentCheckbox.prop('checked', true);
            }
        });
        function handleSingleCheck($checkbox, isChecked) {
            const $siblings = $checkbox.closest('.tree-nav__item').find('input.singlecheck');

            if (isChecked) {
                $checkbox.prop('checked', true);
            } else {
                if ($siblings.filter(':checked').length === 0) {
                    $checkbox.prop('checked', false);
                }
            }
        }

        function Button_Click_File_Upload_Trigger(ID){
            $("#" + ID).click();
        }

        function onCustomFilterValidate(id, IsRun, IsClearFilter) {
            var resultjson = { issuccess: false, customfilterjson: [] };
            resultjson = onCustomFilter(false, id);
            if (resultjson.issuccess) {
                var grid = $("#" + id).data("kendoGrid");
                if (grid == undefined && IsRun == false) {
                    return;
                }
                else if (IsRun == true && grid == undefined) {
                    if (id == "grid") {
                        PageRightsGridLoad();
                        return;
                    }
                    else if (id == "grid1") {
                        RolePageRightsMappingGridLoad();
                        return;
                    }
                    else if (id == "grid2") {
                        UserRoleMappingGridLoad();
                        return;
                    }
                }

                if (IsClearFilter == true) {
                    ResetGridFilter(id);
                    return;
                }
                else {
                    RefreshGridData(id);
                    return;
                }
            }
        }
        var lastcustomreportFilterObjectList = [];
        function onCustomFilter(IsGetLastSaved, id) {

            IsGetLastSaved = (IsGetLastSaved == undefined ? false : IsGetLastSaved);
            var customreportFilterObjectList = [];
            var resultjson = { issuccess: false, customfilterjson: customreportFilterObjectList };
            var reportFilterObject = { code: "", name: "", isFilterApplied: false, reportFilterObjectArry: [] };
            var filterobject = new Object();

            var specificreportFilterObjectList = [];
            var specificreportFilterObject = { code: "", name: "", isFilterApplied: false, reportFilterObjectArry: [] };
            var specificfilterobject = new Object();

            if (IsGetLastSaved) {
                if (lastcustomreportFilterObjectList.length > 0) {
                    for (var i = 0; i <= lastcustomreportFilterObjectList.length - 1; i++) {
                        if (lastcustomreportFilterObjectList[i].id == id) {
                            resultjson = { issuccess: true, customfilterjson: lastcustomreportFilterObjectList[i].customfilterjson };
                            return resultjson;
                        }
                    }
                }
            }

            if ($('#txtdate').val() != "" && $('#txtenddate').val() != "") {
                SetCustomFilterValue(customreportFilterObjectList, reportFilterObject, filterobject, "and", $('#txtdate').val(), KendoGridFilterType.isequalorgreather, KendoFilterTypes.Date, SRVTypes.Date, false, 0, "Created_On_Date", "Created_On_Date", false);
                SetCustomFilterValue(customreportFilterObjectList, reportFilterObject, filterobject, "and", $('#txtenddate').val(), KendoGridFilterType.isequalorless, KendoFilterTypes.Date, SRVTypes.Date, false, 0, "Created_On_Date", "Created_On_Date", true);

                onSpecificFilter(id, specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, "and", $('#txtdate').val()
                    , KendoGridFilterType.isequalorgreather, KendoFilterTypes.Date, SRVTypes.Date, false, 0, "Created_On_Date", "Created_On_Date", false);
                onSpecificFilter(id, specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, "and", $('#txtenddate').val()
                    , KendoGridFilterType.isequalorless, KendoFilterTypes.Date, SRVTypes.Date, false, 0, "Created_On_Date", "Created_On_Date", true);
            }

            if ($('#txtOrigHub').val() != "") {
                SetCustomFilterValue(customreportFilterObjectList, reportFilterObject, filterobject, "and", $('#txtOrigHub').val(), KendoGridFilterType.inlistfilter, KendoFilterTypes.String, SRVTypes.UpperString, false, 0, "OrigHub", "OrigHub", false);
            }

            if (specificreportFilterObjectList.length > 0) {
                for (var i = 0; i < specificreportFilterObjectList.length; i++) {
                    customreportFilterObjectList.push(specificreportFilterObjectList[i]);
                }
            }

            if (lastcustomreportFilterObjectList.length > 0) {
                for (var i = 0; i <= lastcustomreportFilterObjectList.length - 1; i++) {
                    if (lastcustomreportFilterObjectList[i].id == id) {
                        resultjson = { issuccess: true, customfilterjson: lastcustomreportFilterObjectList[i].customfilterjson };
                        break;
                    }
                }
            }

            var isexistscustomfilterjson = false;
            if (lastcustomreportFilterObjectList.length > 0) {
                for (var i = 0; i <= lastcustomreportFilterObjectList.length - 1; i++) {
                    if (lastcustomreportFilterObjectList[i].id == id) {
                        var lastcustomreportFilterObject = new Object();
                        lastcustomreportFilterObject.id = id;
                        lastcustomreportFilterObject.customfilterjson = customreportFilterObjectList;
                        lastcustomreportFilterObjectList[i] = lastcustomreportFilterObject;
                        isexistscustomfilterjson = true;
                        break;
                    }
                }
            }
            if (isexistscustomfilterjson == false) {
                var lastcustomreportFilterObject = new Object();
                lastcustomreportFilterObject.id = id;
                lastcustomreportFilterObject.customfilterjson = customreportFilterObjectList;
                lastcustomreportFilterObjectList.push(lastcustomreportFilterObject);
            }

            resultjson = { issuccess: true, customfilterjson: customreportFilterObjectList };

            return resultjson;
        }
        function onSpecificFilter(id, specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, logic, value, filtertype, fieldtype, srvfieldtype, islist, listtype, code, name, isprevioussamecode, isgridfilter = false) {
            if (code == 'Created_On_Date' && isgridfilter == false) {
                var dateObject = new Date(value)
                dateObject.setDate(dateObject.getDate() + (isprevioussamecode == false ? -1 : 1));
                var newvalue = formatDateToDateTime(dateObject, false);
                SetCustomFilterValue(specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, logic, newvalue, filtertype, fieldtype, srvfieldtype, islist, listtype, "UTC_Created_On_Date", "UTC_Created_On_Date", isprevioussamecode);
            }
            else if (code == 'Created_On_Date' && isgridfilter == true) {
                var dateObject = new Date(value)
                dateObject.setDate(dateObject.getDate() - 1);
                var newvalue = formatDateToDateTime(dateObject, false);
                SetCustomFilterValue(specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, logic, newvalue, KendoGridFilterType.isequalorgreather, fieldtype, srvfieldtype, islist, listtype, "UTC_Created_On_Date", "UTC_Created_On_Date", isprevioussamecode);

                dateObject = new Date(value)
                dateObject.setDate(dateObject.getDate() + 1);
                newvalue = formatDateToDateTime(dateObject, false);
                SetCustomFilterValue(specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, logic, newvalue, KendoGridFilterType.isequalorless, fieldtype, srvfieldtype, islist, listtype, "UTC_Created_On_Date", "UTC_Created_On_Date", true);
            }
        }
        function onReset() {
            $("#PageLoader").show();
            $('#txtdate').val($("#originalstartdate").val());
            $('#txtOrigHub').html($("#hublist").html());
            $('#txtClientID').html($("#clientlist").html())
            $("#PageLoader").hide();
            onCustomFilterValidate('grid', false, true)
        }
    </script>
}