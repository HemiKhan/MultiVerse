@{
    ViewBag.Title = "Role Setup";
    Layout = "~/Views/Shared/_Masterpage.cshtml";
    ViewBag.IsLoadKendo = true;
}

<link rel="stylesheet" type="text/css" href="~/css/select2.min.css?ID=@ViewBag.GUID">

<style>
    .tabs-container #tab4:checked ~ #content4,
    .tabs-container #tab3:checked ~ #content3,
    .tabs-container #tab2:checked ~ #content2,
    .tabs-container #tab1:checked ~ #content1 {
        display: block;
    }
</style>

<!--Wrapper Start -->
<div class="container-fluid pt-4 pb-4 ps-1 pe-1 bg-white rounded">

    <div class="logo text-center border-bottom">
        <h3 class="box-title mb-3">Role Setup</h3>
    </div>

    <div class="row tabs-container">
        <div class="col-lg-12 col-md-12 col-sm-12 tab-content">
            @if (ViewBag.RightsListObj.IsView)
            {
                <input id="tab1" type="radio" name="tabs" checked>
                <label for="tab1" class="tabs-label"><i>R</i>Role</label>
                <input id="tab2" type="radio" name="tabs">
                <label for="tab2" class="tabs-label"><i>RG</i>Role Group</label>
                <input id="tab3" type="radio" name="tabs">
                <label for="tab3" class="tabs-label"><i>RGM</i>Role Group Mapping</label>
            }
            @Html.Hidden("RoleList", (object)ViewBag.RoleList)
            @Html.Hidden("RoleGroupList", (object)ViewBag.RoleGroupList)
            @Html.Hidden("RightsList", (object)ViewBag.RightsList)

            <!-- Role Grid Add / Edit Start -->
            <section id="content1">
                <div class="row">
                    <div class="col-lg-12" style="font-size:0.75em" id="tablerecord">
                        <div class="w-100 text-right">
                            <div class="button-group">
                                <button type="button" class="btn Theme-button font-weight-medium" style="display: none" id="rolesetupmodalbutton" onclick="GetAddEditRoleSetupModal(0);">+ Add New Role</button>
                            </div>
                        </div>
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <div class="panel box box-info">
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="col-md-12 col-sm-12 col-xs-12">
                                            <div id="grid"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            <!-- Role Grid Add / Edit End -->
            <!-- Role Group Grid Add / Edit Start -->
            <section id="content2">

                <div class="row">
                    <div class="col-lg-12" style="font-size:0.75em" id="tablerecord">
                        <div class="w-100 text-right">
                            <div class="button-group">
                                <button type="button" class="btn Theme-button font-weight-medium" style="display: none" id="rolegroupmodalbutton" onclick="GetAddEditRoleGroupModal(0);">+ Add New Role Group</button>
                            </div>
                        </div>
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <div class="panel box box-info">
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="col-md-12 col-sm-12 col-xs-12">
                                            <div id="grid1"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </section>
            <!-- Role Group Grid Add / Edit End -->
            <!-- Role Group Mapping Grid Add / Edit Start -->
            <section id="content3">
                <div class="row">
                    <div class="col-lg-12" style="font-size:0.75em" id="tablerecord">
                        <div class="w-100 text-right">
                            <div class="button-group">
                                <button type="button" class="btn Theme-button font-weight-medium" style="display: none" id="rolegroupmappingmodalbutton" onclick="GetAddEditRoleGroupMappingModal(0);">+ Add New Role Group Mapping</button>
                            </div>
                        </div>
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <div class="panel box box-info">
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="col-md-12 col-sm-12 col-xs-12">
                                            <div id="grid2"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            <!-- Role Group Mapping Grid Add / Edit End -->

        </div>
    </div>

</div>
<!--Wrapper End -->

<script src="~/js/GridFilter2.js?ID=@ViewBag.GUID"></script>
<script src="~/js/select2.js?ID=@ViewBag.GUID" type="text/javascript"></script>
<script src="~/js/custom-Validation.js?ID=@ViewBag.GUID"></script>

@section scripts {
    <script>
        var RoleList = JSON.parse($("#RoleList").val());
        var RoleGroupList = JSON.parse($("#RoleGroupList").val());
        var RightsList = JSON.parse($("#RightsList").val());
        var requiredFields;

        KendoDateInitial();
        Select2Initial();
        SetPageRights();
        //Load Grids
        if (RightsList.IsView) {
            RoleGridLoad();
            $("#tab1").change(function () {
                if ($(this).is(":checked")) {

                    if ($("#grid").data("kendoGrid")) {
                        return;
                    }
                    RoleGridLoad();
                }
            });
            $("#tab2").change(function () {
                if ($(this).is(":checked")) {

                    if ($("#grid1").data("kendoGrid")) {
                        return;
                    }
                    RoleGroupGridLoad();
                }
            });
            $("#tab3").change(function () {
                if ($(this).is(":checked")) {

                    if ($("#grid2").data("kendoGrid")) {
                        return;
                    }
                    RoleGroupMappingGridLoad();
                }
            });
        }

        function SetPageRights() {
            if (RightsList.IsAdd) {
                $('#rolesetupmodalbutton').show();
                $('#rolegroupmodalbutton').show();
                $('#rolegroupmappingmodalbutton').show();
                $('#departmentrolemappingmodalbutton').show();
            }
        }

        //Role - Add/Edit/Model/Remove
        function RoleGridLoad() {
            var kendogridid = 'grid';
            var pagesize = 30;
            $("#PageLoader").show();
            $("#" + kendogridid).empty();
            var Rolefieldstype = {
                rowno: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                R_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                RoleName: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                Sort_: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                IsActive: { type: KendoFilterTypes.Boolean, srtype: SRVTypes.Boolean },
            }
            var _griddatasource = GetGridDataSourceAjaxCommon(kendogridid, pagesize, "/Security/GetFilterData_Role_List", true, true, true, Rolefieldstype, false, false);
            $("#" + kendogridid).kendoGrid({
                dataSource: _griddatasource,
                responsive: false,
                pageable: {
                    alwaysVisible: true,
                    refresh: true,
                    pageSizes: [30, 50, 100, 500, 1000, 5000],
                    messages: {
                        display: "{0} - {1} of {2} items &nbsp;&nbsp;|&nbsp;&nbsp; Export:&nbsp;<img id='" + kendogridid + "_exportExcel' title='Click here to export to excel file' src='/icon/excel_icon.jpg' style='width:23px; height:23px; cursor:pointer' onclick='onClickExportExcel(this)' /> ",
                        empty: "No data found",
                    }
                },
                controllername: "Report", //custom fields for ExportToExcel function
                controllermethodname: "ExportInExcel_RoleDetail", //custom fields for ExportToExcel function
                //recordsLimit: 10000,
                sortable: true,
                resizable: false,
                reorderable: false,
                noRecords: true,
                filterable: {
                    extra: true,
                    //operators: KendoOperatorListOfString,
                },
                customfixheader: false, //custom fields for onKendoDataBound function
                pageloaderid: "PageLoader", //custom fields for onKendoDataBound function
                dataBound: onKendoDataBound,
                dataBinding: function (e) {
                    $("#PageLoader").hide();
                },
                columns: [
                    {
                        field: "rowno",
                        title: "Row No ",
                        width: 100,
                        filterable: false,
                        sortable: false,
                    },
                    {
                        field: "R_ID",
                        title: "Role ID ",
                        width: 120,
                        filterable: false,
                        sortable: false,
                        hidden: true,
                    },
                    {
                        field: "R_ID",
                        originalfield: "RoleName",
                        title: "Role Name",
                        width: 200,
                        template: function (dataItem) {
                            return dataItem.RoleName;
                        },
                        filterable: { multi: true, extra: false, search: true, checkAll: false },
                        values: RoleList,
                    },
                    {
                        field: "Sort_",
                        title: "Sort_",
                        width: 190,
                        filterable: { extra: false, operators: { string: { contains: "equals" } } }
                    },
                    {
                        field: "IsActive",
                        title: "IsActive",
                        width: 120,
                        template: function (dataItem) {
                            if (RightsList.IsDelete) {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png" alt="Active" class="cursor-pointer" onclick="Role_Remove(this,' + dataItem.R_ID + ',' + dataItem.IsActive + ');"/>';
                                } else {
                                    return '<img src="../icon/cross.png" alt="Inactive" class="cursor-pointer" onclick="Role_Remove(this,' + dataItem.R_ID + ',' + dataItem.IsActive + ');"/>';
                                }
                            }
                            else {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png"/>';
                                } else {
                                    return '<img src="../icon/cross.png"/>';
                                }
                            }
                        },
                        attributes: {
                            style: "text-align: center;"
                        }
                    },
                    {
                        title: "Action",
                        width: 100,
                        filterable: false,
                        template: function (dataItem) {
                            var actionfield = '';
                            if (RightsList.IsEdit) {
                                actionfield += '<a><i class="fa fa-edit Theme-icon fa-1x ms-1 cursor-pointer" onclick="GetAddEditRoleSetupModal(' + dataItem.R_ID + ');"></i></a>'
                            }
                            return actionfield;
                        }
                    },
                ],
                detailInit: function (e) {
                    $("#PageLoader").hide();
                }
            });
        }
        function GetAddEditRoleSetupModal(RoleID) {
            if ((RoleID == 0 && RightsList.IsAdd == true) || (RoleID > 0 && RightsList.IsEdit == true)) {
                GetAddEditModalAjaxCommon(RoleID, "/Security/GetAddEditRoleSetupModal");
            } else {
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }
        function AddOrEditRole() {
            var ObjJson = new Object();
            ObjJson.RoleID = $("#modalroleid").val();
            ObjJson.RoleName = $("#modalrolename").val();
            ObjJson.Active = $("#modalroleisactive").is(":checked");
            var JsonData = JSON.stringify(ObjJson);
            requiredFields = ['RoleName'];
            if (!validateRequiredFields(ObjJson, requiredFields)) {
                return;
            }
            AddEditRemoveAjaxCommon(JsonData, "/Security/AddOrEdit_Role", null, false, 'grid');
        }
        function Role_Remove(this_, RoleID, IsActive) {
            if (RightsList.IsDelete) {
                if ($(this_).attr("disabled") == "disabled") {
                    return;
                }
                $(this_).attr("disabled", "disabled");
                IsActiveEditCommon(RoleID, "/Security/Remove_Role", null, RoleID, IsActive, "Role ID", 'grid');
            }else{
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }

        //Role Group - Add/Edit/Model/Remove
        function RoleGroupGridLoad() {
            var kendogridid = 'grid1';
            var pagesize = 30;
            $("#PageLoader").show();
            $("#" + kendogridid).empty();
            var RoleGroupfieldstype = {
                rowno: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                RG_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                RoleGroupName: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                Sort_: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                IsActive: { type: KendoFilterTypes.Boolean, srtype: SRVTypes.Boolean },
            }
            var _griddatasource1 = GetGridDataSourceAjaxCommon(kendogridid, pagesize, "/Security/GetFilterData_RoleGroup_List", true, true, true, RoleGroupfieldstype, false, false);
            $("#" + kendogridid).kendoGrid({
                dataSource: _griddatasource1,
                responsive: false,
                pageable: {
                    alwaysVisible: true,
                    refresh: true,
                    pageSizes: [30, 50, 100, 500, 1000, 5000],
                    messages: {
                        display: "{0} - {1} of {2} items &nbsp;&nbsp;|&nbsp;&nbsp; Export:&nbsp;<img id='" + kendogridid + "_exportExcel' title='Click here to export to excel file' src='/icon/excel_icon.jpg' style='width:23px; height:23px; cursor:pointer' onclick='onClickExportExcel(this)' /> ",
                        empty: "No data found",
                    }
                },
                controllername: "Report", //custom fields for ExportToExcel function
                controllermethodname: "ExportInExcel_RoleGroupDetail", //custom fields for ExportToExcel function
                //recordsLimit: 10000,
                sortable: true,
                resizable: false,
                reorderable: false,
                noRecords: true,
                filterable: {
                    extra: true,
                },
                customfixheader: false, //custom fields for onKendoDataBound function
                pageloaderid: "PageLoader", //custom fields for onKendoDataBound function
                dataBound: onKendoDataBound,
                dataBinding: function (e) {
                    $("#PageLoader").hide();
                },
                columns: [
                    {
                        field: "rowno",
                        title: "Row No ",
                        width: 100,
                        filterable: false,
                        sortable: false,
                    },
                    {
                        field: "RG_ID",
                        title: "Role Group ID",
                        width: 180,
                        // hidden: true,
                        filterable: { extra: false, operators: { string: { contains: "equals" } } }
                    },
                    {
                        field: "RG_ID",
                        title: "Role Group Name",
                        width: 200,
                        template: function (dataItem) {
                            return dataItem.RoleGroupName;
                        },
                        values: RoleGroupList,
                        filterable: { multi: true, extra: false, search: true, checkAll: false },
                        originalfield: "RoleGroupName",
                    },
                    {
                        field: "Sort_",
                        title: "Sort_",
                        width: 160,
                        filterable: { extra: false, operators: { string: { contains: "equals" } } }
                    },
                    {
                        field: "IsActive",
                        title: "IsActive",
                        width: 120,
                        template: function (dataItem) {
                            if (RightsList.IsDelete) {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png" alt="Active" class="cursor-pointer" onclick="Role_Group_Remove(this,' + dataItem.RG_ID + ',' + dataItem.IsActive + ');"/>';
                                } else {
                                    return '<img src="../icon/cross.png" alt="Inactive" class="cursor-pointer" onclick="Role_Group_Remove(this,' + dataItem.RG_ID + ',' + dataItem.IsActive + ');"/>';
                                }
                            }
                            else {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png"/>';
                                } else {
                                    return '<img src="../icon/cross.png"/>';
                                }
                            }
                        },
                        attributes: {
                            style: "text-align: center;"
                        }
                    },
                    {
                        title: "Action",
                        width: 100,
                        filterable: false,
                        template: function (dataItem) {
                            var actionfield = '';
                            if (RightsList.IsEdit) {
                                actionfield += '<a><i class="fa fa-edit Theme-icon fa-1x ms-1 cursor-pointer" onclick="GetAddEditRoleGroupModal(' + dataItem.RG_ID + ');"></i></a>'
                            }
                            return actionfield;
                        }
                    },
                ],
                detailInit: function (e) {
                    $("#PageLoader").hide();
                }
            });
        }
        function GetAddEditRoleGroupModal(RoleGroupID) {
            if ((RoleGroupID == 0 && RightsList.IsAdd == true) || (RoleGroupID > 0 && RightsList.IsEdit == true)) {
                GetAddEditModalAjaxCommon(RoleGroupID, "/Security/GetAddEditRoleGroupModal");
            } else {
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }
        function AddOrEdit_Role_Group() {
            var ObjJson = new Object();
            ObjJson.RoleGroupID = $("#modalrolegroupid").val();
            ObjJson.RoleGroupName = $("#modalrolegroupname").val();
            ObjJson.Active = $("#modalrolegroupisactive").is(":checked");
            var JsonData = JSON.stringify(ObjJson);
            requiredFields = ['RoleGroupName'];
            if (!validateRequiredFields(ObjJson, requiredFields)) {
                return;
            }
            AddEditRemoveAjaxCommon(JsonData, "/Security/AddOrEdit_Role_Group", null, false, 'grid1');
        }
        function Role_Group_Remove(this_, RoleGroupID, IsActive) {
            if (RightsList.IsDelete) {
                if ($(this_).attr("disabled") == "disabled") {
                    return;
                }
                $(this_).attr("disabled", "disabled");
                IsActiveEditCommon(RoleGroupID, "/Security/Remove_Role_Group", null, RoleGroupID, IsActive, "Role Group ID", 'grid1');
            } else { 
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }
       
        //Role Group Mapping - Add/Edit/Model/Remove
        function RoleGroupMappingGridLoad() {
            var kendogridid = 'grid2';
            var pagesize = 30;
            $("#PageLoader").show();
            $("#" + kendogridid).empty();
            var RoleGroupMapfieldstype = {
                rowno: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                RGM_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                R_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                RG_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                RoleName: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                RoleGroupName: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                IsActive: { type: KendoFilterTypes.Boolean, srtype: SRVTypes.Boolean },
            }
            var _griddatasource2 = GetGridDataSourceAjaxCommon(kendogridid, pagesize, "/Security/GetFilterData_RoleGroupMap_List", true, true, true, RoleGroupMapfieldstype, false, false);
            $("#" + kendogridid).kendoGrid({
                dataSource: _griddatasource2,
                responsive: false,
                pageable: {
                    alwaysVisible: true,
                    refresh: true,
                    pageSizes: [30, 50, 100, 500, 1000, 5000],
                    messages: {
                        display: "{0} - {1} of {2} items &nbsp;&nbsp;|&nbsp;&nbsp; Export:&nbsp;<img id='" + kendogridid + "_exportExcel' title='Click here to export to excel file' src='/icon/excel_icon.jpg' style='width:23px; height:23px; cursor:pointer' onclick='onClickExportExcel(this)' /> ",
                        empty: "No data found",
                    }
                },
                controllername: "Report", //custom fields for ExportToExcel function
                controllermethodname: "ExportInExcel_RoleGroupMapDetail", //custom fields for ExportToExcel function
                //recordsLimit: 10000,
                sortable: true,
                resizable: false,
                reorderable: false,
                noRecords: true,
                filterable: {
                    extra: true,
                },
                customfixheader: false, //custom fields for onKendoDataBound function
                pageloaderid: "PageLoader", //custom fields for onKendoDataBound function
                dataBound: onKendoDataBound,
                dataBinding: function (e) {
                    $("#PageLoader").hide();
                },
                columns: [
                    {
                        field: "rowno",
                        title: "Row No ",
                        width: 100,
                        filterable: false,
                        sortable: false,
                    },
                    {
                        field: "RGM_ID",
                        title: "RGM ID",
                        width: 120,
                        // hidden: true,
                        filterable: { extra: false, operators: { string: { contains: "equals" } } }
                    },
                    {
                        field: "R_ID",
                        title: "R ID",
                        width: 120,
                        // hidden: true,
                        filterable: { extra: false, operators: { string: { contains: "equals" } } }
                    },
                    {
                        field: "RG_ID",
                        title: "RG ID",
                        width: 120,
                        // hidden: true,
                        filterable: { extra: false, operators: { string: { contains: "equals" } } }
                    },
                    {
                        field: "RG_ID",
                        originalfield: "RoleGroupName",
                        title: "Role Group Name",
                        width: 200,
                        template: function (dataItem) {
                            return dataItem.RoleGroupName;
                        },
                        filterable: { multi: true, extra: false, search: true, checkAll: false },
                        values: RoleGroupList,
                    },
                    {
                        field: "R_ID",
                        originalfield: "RoleName",
                        title: "Role Name",
                        width: 200,
                        template: function (dataItem) {
                            return dataItem.RoleName;
                        },
                        filterable: { multi: true, extra: false, search: true, checkAll: false },
                        values: RoleList,
                    },
                    {
                        field: "IsActive",
                        title: "IsActive",
                        width: 120,
                        template: function (dataItem) {
                            if (RightsList.IsDelete) {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png" alt="Active" class="cursor-pointer" onclick="Role_Group_Mapping_Remove(this,' + dataItem.RGM_ID + ',' + dataItem.IsActive + ');"/>';
                                } else {
                                    return '<img src="../icon/cross.png" alt="Inactive" class="cursor-pointer" onclick="Role_Group_Mapping_Remove(this,' + dataItem.RGM_ID + ',' + dataItem.IsActive + ');"/>';
                                }
                            }
                            else {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png"/>';
                                } else {
                                    return '<img src="../icon/cross.png"/>';
                                }
                            }
                        },
                        attributes: {
                            style: "text-align: center;"
                        }
                    },
                    {
                        title: "Action",
                        width: 100,
                        filterable: false,
                        template: function (dataItem) {
                            var actionfield = '';
                            if (RightsList.IsEdit) {
                                actionfield += '<a><i class="fa fa-edit Theme-icon fa-1x ms-1 cursor-pointer" onclick="GetAddEditRoleGroupMappingModal(' + dataItem.RGM_ID + ');"></i></a>'
                            }
                            return actionfield;
                        }

                    },
                ],
                detailInit: function (e) {
                    $("#PageLoader").hide();
                }
            });
        }
        function GetAddEditRoleGroupMappingModal(RoleGroupMappingID) {
            if ((RoleGroupMappingID == 0 && RightsList.IsAdd == true) || (RoleGroupMappingID > 0 && RightsList.IsEdit == true)) {
                GetAddEditModalAjaxCommon(RoleGroupMappingID, "/Security/GetAddEditRoleGroupMappingModal");
            } else {
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }
        function AddOrEdit_Role_Group_Mapping() {
            var ObjJson = new Object();
            ObjJson.RoleGroupMappingID = $("#modalrolegroupmaingid").val();
            ObjJson.RoleID = $("#modalrgmrolename option:selected").val();
            ObjJson.RoleGroupID = $("#modalrgmrolegroupname option:selected").val();
            ObjJson.Active = $("#modalrolegroupmappingisactive").is(":checked");
            var JsonData = JSON.stringify(ObjJson);
            requiredFields = ['RoleID', 'RoleGroupID'];
            if (!validateRequiredFields(ObjJson, requiredFields)) {
                return;
            }
            AddEditRemoveAjaxCommon(JsonData, "/Security/AddOrEdit_Role_Group_Mapping", null, false, 'grid2');
        }
        function Role_Group_Mapping_Remove(this_, RoleGroupMappingID, IsActive) {
            if (RightsList.IsDelete) {
                if ($(this_).attr("disabled") == "disabled") {
                    return;
                }
                $(this_).attr("disabled", "disabled");
                IsActiveEditCommon(RoleGroupMappingID, "/Security/Remove_Role_Group_Mapping", null, RoleGroupMappingID, IsActive, "Role Group Mapping ID", 'grid2');
            } else {
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }
        function Load_Roles_By_RoleGroup_Dropdown(RG_ID) {
            GetDropDownListCommonAjax(RG_ID, "/Security/Get_Roles_By_RoleGroup_Dropdown", "modalrgmrolename");
        }

        function onCustomFilterValidate(id, IsRun, IsClearFilter) {
            var resultjson = { issuccess: false, customfilterjson: [] };
            resultjson = onCustomFilter(false, id);
            if (resultjson.issuccess) {
                var grid = $("#" + id).data("kendoGrid");
                if (grid == undefined && IsRun == false) {
                    return;
                }
                else if (IsRun == true && grid == undefined) {
                    if (id == "grid") {
                        RoleGridLoad();
                        return;
                    }
                    else if (id == "grid1") {
                        RoleGroupGridLoad();
                        return;
                    }
                    else if (id == "grid2") {
                        RoleGroupMappingGridLoad();
                        return;
                    }
                    else if (id == "grid3") {
                        DepartmentRoleMappingGridLoad();
                        return;
                    }
                }

                if (IsClearFilter == true) {
                    ResetGridFilter(id);
                    return;
                }
                else {
                    RefreshGridData(id);
                    return;
                }
            }
        }

        var lastcustomreportFilterObjectList = [];
        function onCustomFilter(IsGetLastSaved, id) {

            IsGetLastSaved = (IsGetLastSaved == undefined ? false : IsGetLastSaved);
            var customreportFilterObjectList = [];
            var resultjson = { issuccess: false, customfilterjson: customreportFilterObjectList };
            var reportFilterObject = { code: "", name: "", isFilterApplied: false, reportFilterObjectArry: [] };
            var filterobject = new Object();

            var specificreportFilterObjectList = [];
            var specificreportFilterObject = { code: "", name: "", isFilterApplied: false, reportFilterObjectArry: [] };
            var specificfilterobject = new Object();

            if (IsGetLastSaved) {
                if (lastcustomreportFilterObjectList.length > 0) {
                    for (var i = 0; i <= lastcustomreportFilterObjectList.length - 1; i++) {
                        if (lastcustomreportFilterObjectList[i].id == id) {
                            resultjson = { issuccess: true, customfilterjson: lastcustomreportFilterObjectList[i].customfilterjson };
                            return resultjson;
                        }
                    }
                }
            }

            if ($('#txtdate').val() != "" && $('#txtenddate').val() != "") {
                SetCustomFilterValue(customreportFilterObjectList, reportFilterObject, filterobject, "and", $('#txtdate').val(), KendoGridFilterType.isequalorgreather, KendoFilterTypes.Date, SRVTypes.Date, false, 0, "Created_On_Date", "Created_On_Date", false);
                SetCustomFilterValue(customreportFilterObjectList, reportFilterObject, filterobject, "and", $('#txtenddate').val(), KendoGridFilterType.isequalorless, KendoFilterTypes.Date, SRVTypes.Date, false, 0, "Created_On_Date", "Created_On_Date", true);

                onSpecificFilter(id, specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, "and", $('#txtdate').val()
                    , KendoGridFilterType.isequalorgreather, KendoFilterTypes.Date, SRVTypes.Date, false, 0, "Created_On_Date", "Created_On_Date", false);
                onSpecificFilter(id, specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, "and", $('#txtenddate').val()
                    , KendoGridFilterType.isequalorless, KendoFilterTypes.Date, SRVTypes.Date, false, 0, "Created_On_Date", "Created_On_Date", true);
            }

            if ($('#txtOrigHub').val() != "") {
                SetCustomFilterValue(customreportFilterObjectList, reportFilterObject, filterobject, "and", $('#txtOrigHub').val(), KendoGridFilterType.inlistfilter, KendoFilterTypes.String, SRVTypes.UpperString, false, 0, "OrigHub", "OrigHub", false);
            }

            if (specificreportFilterObjectList.length > 0) {
                for (var i = 0; i < specificreportFilterObjectList.length; i++) {
                    customreportFilterObjectList.push(specificreportFilterObjectList[i]);
                }
            }

            if (lastcustomreportFilterObjectList.length > 0) {
                for (var i = 0; i <= lastcustomreportFilterObjectList.length - 1; i++) {
                    if (lastcustomreportFilterObjectList[i].id == id) {
                        resultjson = { issuccess: true, customfilterjson: lastcustomreportFilterObjectList[i].customfilterjson };
                        break;
                    }
                }
            }

            var isexistscustomfilterjson = false;
            if (lastcustomreportFilterObjectList.length > 0) {
                for (var i = 0; i <= lastcustomreportFilterObjectList.length - 1; i++) {
                    if (lastcustomreportFilterObjectList[i].id == id) {
                        var lastcustomreportFilterObject = new Object();
                        lastcustomreportFilterObject.id = id;
                        lastcustomreportFilterObject.customfilterjson = customreportFilterObjectList;
                        lastcustomreportFilterObjectList[i] = lastcustomreportFilterObject;
                        isexistscustomfilterjson = true;
                        break;
                    }
                }
            }
            if (isexistscustomfilterjson == false) {
                var lastcustomreportFilterObject = new Object();
                lastcustomreportFilterObject.id = id;
                lastcustomreportFilterObject.customfilterjson = customreportFilterObjectList;
                lastcustomreportFilterObjectList.push(lastcustomreportFilterObject);
            }

            resultjson = { issuccess: true, customfilterjson: customreportFilterObjectList };

            return resultjson;
        }

        function onSpecificFilter(id, specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, logic, value, filtertype, fieldtype, srvfieldtype, islist, listtype, code, name, isprevioussamecode, isgridfilter = false) {
            if (code == 'Created_On_Date' && isgridfilter == false) {
                var dateObject = new Date(value)
                dateObject.setDate(dateObject.getDate() + (isprevioussamecode == false ? -1 : 1));
                var newvalue = formatDateToDateTime(dateObject, false);
                SetCustomFilterValue(specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, logic, newvalue, filtertype, fieldtype, srvfieldtype, islist, listtype, "UTC_Created_On_Date", "UTC_Created_On_Date", isprevioussamecode);
            }
            else if (code == 'Created_On_Date' && isgridfilter == true) {
                var dateObject = new Date(value)
                dateObject.setDate(dateObject.getDate() - 1);
                var newvalue = formatDateToDateTime(dateObject, false);
                SetCustomFilterValue(specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, logic, newvalue, KendoGridFilterType.isequalorgreather, fieldtype, srvfieldtype, islist, listtype, "UTC_Created_On_Date", "UTC_Created_On_Date", isprevioussamecode);

                dateObject = new Date(value)
                dateObject.setDate(dateObject.getDate() + 1);
                newvalue = formatDateToDateTime(dateObject, false);
                SetCustomFilterValue(specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, logic, newvalue, KendoGridFilterType.isequalorless, fieldtype, srvfieldtype, islist, listtype, "UTC_Created_On_Date", "UTC_Created_On_Date", true);
            }
        }

        function onReset() {
            $("#PageLoader").show();
            $('#txtdate').val($("#originalstartdate").val());
            $('#txtOrigHub').html($("#hublist").html());
            $('#txtClientID').html($("#clientlist").html())
            $("#PageLoader").hide();
            onCustomFilterValidate('grid', false, true)
        }
    </script>
}